work43

工作周报 - 李镇邦 20200817 ~ 20200821

完成：
1. WARP-44960: 比对v1和v2 perm部分api功能；v2 perm部分api重构覆盖补全；GET/DELET请求body重构；UT设计；
整理wiki：http://172.16.1.168:8090/pages/viewpage.action?pageId=24605971
2. WARP-49566: 提供某个服务的版本号及插件版本信息的api，设计暴露前端页面配置的方式，待具体讨论方案继续实施

本周：
1. 继续guardian-3.1.4/guardian-3.2.1的代码review整理
2. 计划中的代码设计与提交

有序集合对象
有序集合的编码可以是 ziplist 或者 skiplist 。
跳跃表中元素维持压缩列表的元素映射
ZADD ZCARD ZCOUNT ZRANGE ZREVRANGE ZRANK ZREVRANK ZREM ZSCORE
有序集合对象因为元素的成员过长而引发编码转换
 
集合对象的编码可以是 intset 或者 hashtable。

mysql redis golang java OAuth2/kerberos/cas hdfs

mysql 非聚簇索引/聚簇索引
索引底层数据结构，为什么选用这一数据结构 innodb默认隔离级别 存在什么问题 如何解决
redis zset数据结构 list数据结构 
goroutine和线程的区别 GMP模型

非聚簇索引/聚簇索引
innodb和myisam引擎不同 innodb聚簇 主健叶子节点存放具体数据 // myisam叶子节点存放指向数据的地址 
表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。
聚簇索引查找索引快 但主键不支持频繁更新 插入新值
innodb和myisam的区别：事务行锁聚簇索引

索引底层结构
B+

有序集合对象有两种编码形式，压缩列表和zset，zset 底层通过跳跃表和字典数据结构实现
满足zset查找，排序，范围形操作功能

 * When <code>commit</code> is called, the <code>KerberosPrincipal</code>
 * is added to the  <code>Subject</code>'s
 * principal set and <code>KerberosTicket</code> is
 * added to the <code>Subject</code>'s private credentials.

9 10 11 12 1

federationloader conf 想要改读配置文件的名称

spring.datasource.url=jdbc:mysql://localhost:3307/federation?characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=123456

Thread.currentThread().getContextClassLoader()
servlet.contect


beeline -u "jdbc:hive2://node547:10000/default;oauth2Token=xxxx"
thread context classloader 本质是获取当前的系统类加载器，可以越过双亲委派原则去实现SPI机制
为什么使用双亲委派原则 双亲委派原则有哪些不足（代码由启动类加载，对资源进行管理和查找） 怎么去避免 类加载器
1. service在哪里拿  classpath
2. 

列存数据库用于数据分析 olap
事务一般用在行存 oltp

 hdfs -ls http://ip:port

2020-08-27 14:50:32,586 INFO org.apache.hadoop.http.HttpServer2: Adding Kerberos (SPNEGO) filter to getJournal
2020-08-27 14:50:32,647 ERROR org.apache.hadoop.hdfs.qjournal.server.JournalNode: Failed to start journalnode.
java.io.IOException: OAuth2 configuration not found
        at org.apache.hadoop.util.AuthUtil.getOAuth2Configuration(AuthUtil.java:47)
        at org.apache.hadoop.util.AuthUtil.createAuthFilterProvider(AuthUtil.java:25)
        at org.apache.hadoop.hdfs.qjournal.server.JournalNodeHttpServer.setupAuthFilter(JournalNodeHttpServer.java:126)
        at org.apache.hadoop.hdfs.qjournal.server.JournalNodeHttpServer.start(JournalNodeHttpServer.java:71)
        at org.apache.hadoop.hdfs.qjournal.server.JournalNode.start(JournalNode.java:152)
        at org.apache.hadoop.hdfs.qjournal.server.JournalNode.run(JournalNode.java:128)
        at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:70)
        at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:84)
        at org.apache.hadoop.hdfs.qjournal.server.JournalNode.main(JournalNode.java:299)
Caused by: io.transwarp.guardian.federation.utils.oauth2.configuration.InvalidOAuth2ConfigurationException: OAuth2 configuration not found
        at io.transwarp.guardian.federation.utils.oauth2.configuration.OAuth2ConfigurationCompositeLoader.load(OAuth2ConfigurationCompositeLoader.java:25)
        at io.transwarp.guardian.federation.utils.oauth2.configuration.OAuth2ConfigurationFactory.getConf(OAuth2ConfigurationFactory.java:21)
        at org.apache.hadoop.util.AuthUtil.getOAuth2Configuration(AuthUtil.java:43)
        ... 8 more



  private class CasOAuth2Service extends OAuth20Service {

    CasOAuth2Service(final DefaultApi20 api, final OAuthConfig config) {
      super(api, config);
    }

    @Override
    public void signRequest(final OAuth2AccessToken accessToken, final AbstractRequest request) {
      request.addQuerystringParameter(tokenParameterName, accessToken.getAccessToken());
    }

    @Override
    protected <T extends AbstractRequest> T createAccessTokenRequest(final String code, final T request) {
      final OAuthConfig config = this.getConfig();
      if (clientCredentialsAsHeader) {
        final String encoded = Base64.getEncoder().encodeToString(
            (config.getApiKey() + ":" + config.getApiSecret()).getBytes());
        request.addHeader("Authorization", "Basic " + encoded);
      } else {
        request.addParameter("client_id", config.getApiKey());
        request.addParameter("client_secret", config.getApiSecret());
      }
      request.addParameter("code", code);
      request.addParameter("redirect_uri", config.getCallback());
      final String scope = config.getScope();
      if(scope != null) {
        request.addParameter("scope", scope);
      }
      request.addParameter("grant_type", "authorization_code");
      return request;
    }
  }

oAuth2Client -- OAuth2Api / OAuth2ProfileCreator / OAuth2ProfileDefinition -> 

oAuth2Client
  OAuth2Api // api is federation sprcial interface 
e.g. tokenParameterName, clientCredentialsAsHeader

  OAuth2ProfileCreator // 
  OAuth2ProfileDefinition
OAuth2Service OAuth2Profile

CasClient
CasOAuthWrapperApi20 CasProfileDefinition



https://labuladong.gitbook.io/algo/

<!DOCTYPE html>
<html>
<body>

<iframe src="/example/html/demo_iframe.html" name="iframe_a"></iframe>

<p><a href="http://www.w3school.com.cn" target="iframe_a">W3School.com.cn</a></p>

<p><b>注释：</b>由于链接的目标匹配 iframe 的名称，所以链接会在 iframe 中打开。</p>

</body>
</html>

<iframe src="/example/html/demo_iframe.html" width="200" height="200"></iframe>

/etc/configuration-server/config-store/cas.properties

https://172.26.5.95:8393/cas/status/config

cas.httpWebRequest.header.xframe=false

https://172.26.5.98:8393/cas/status/config


cas.authn.pac4j.autoRedirect=true

cas.authn.pac4j.cas[0].loginUrl=https://172.26.5.95:8393/cas/login

cas.authn.pac4j.cas[0].protocol=CAS30

cas.authn.pac4j.cas[0].clientName=CAS2

/etc/configuration-server/config-store

cas.tgc.secure=false

cookie

https不能跨域

secure属性
当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。

cas.tgc.secure=false

https://stackoverflow.com/questions/39252924/add-secure-flag-to-jsessionid-cookie-in-spring-automatically

 <iframe src="https://172.26.5.94:8380" title="W3Schools Free Online Web Tutorials"></iframe> 
