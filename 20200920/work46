work46

工作周报李镇邦 20200824~20200828

完成：
1. WARP-44916: 完成重构user/group/admin/role部分的api的review
2. WARP-43659: 完成修改resource-manager模块单测的review
3. WARP-50492: 完成Guardian根因分析规则梳理


其他：
1. 编写guardian-federation 文档 federation与各组件对接部分
2. 集群测试以上的review及federation文档对接部分

本周：
1. 整理其他review
2. 其他开发工作

 // resource
  void deleteResource(ResourceVo resourceVo) throws GuardianClientException;
  
  void deleteServiceResource(String serviceName) throws GuardianClientException;
  
  List<NodeVo> getChildNodes(ResourceVo resourceVo) throws GuardianClientException;
  
  List<ResourceVo> getDescendantResources(ResourceVo resourceVo) throws GuardianClientException;

  void renameNode(RenameNodeRequestVo renameNodeVo) throws GuardianClientException;


 void registerService(ServiceVo serviceVo) throws GuardianClientException;
  
  void unregisterService(String serviceName, boolean includeResources) throws GuardianClientException;

  void unregisterServices(List<String> serviceNames, boolean includeResources) throws GuardianClientException;
  
  List<ServiceVo> listRegisteredServices() throws GuardianClientException;
  
  String getYarnSchedulerXml(String component, String name) throws GuardianClientException;

void register(String serviceType, String serviceName, String description, Map<String, String> configs) throws GuardianClientException;
register
void removeService(ServiceVo serviceVo)

void removeServices(List<ServiceVo> serviceVos)

List<ServiceVo> listRegisteredServices()

String getYarnSchedulerXml(String component, String name)

class Solution {
    public String longestCommonPrefix(String[] strs) {
        Tire tire = new Tire();
        for (String str : strs) {
            if (str.length() == 0) {
                return "";
            }
            tire.insert(str);
        }
        return tire.searchMaxPrefix();
    }

    class Tire {
        class TireNode {
            TireNode[] child;
            boolean flag;

            public TireNode() {
                child = new TireNode[26];
                flag = false;
            }

        }

        /** 前缀树的根节点 */
        TireNode root;

        public Tire() {
            root = new TireNode();
        }

        /**
         * 插入每一个单词进入前缀树
         * @param str
         */
        public void insert(String str) {
            TireNode cur = root;
            for (int i = 0; i < str.length(); i++) {
                if (cur.child[str.charAt(i) - 'a'] == null) {
                    cur.child[str.charAt(i) - 'a'] = new TireNode();
                }
                cur = cur.child[str.charAt(i) - 'a'];
            }
            cur.flag = true;
        }

        /**
         * 查找最长公共前缀
         * @return
         */
        public String searchMaxPrefix() {
            StringBuilder sb = new StringBuilder();
            TireNode cur = root;
            Character c = isPrefixNode(cur);
            while (!cur.flag && c != null) {
                sb.append(c);
                cur = cur.child[c - 'a'];
                c = isPrefixNode(cur);
            }
            return sb.toString();
        }

        /**
         * 判断当前这个节点是否是整个树的前缀，也就是孩子只有一个字母
         * @param cur
         * @return
         */
        private Character isPrefixNode(TireNode cur) {
            Character c = null;
            int cnt = 0;
            for (int i = 0; i < 26; i++) {
                if (cur.child[i] != null) {
                    c = (char) ('a' + i);
                    cnt++;
                }
                if (cnt > 1) {
                    break;
                }
            }
            return cnt == 1 ? c : null;
        }
    }
}

class Solution {
    public String longestCommonPrefix(String[] strs) {
        String pre = "";
        if(strs.length==0){
            return "";
        }
        if (strs.length==1){
            return strs[0];
        }
        pre = help(strs[0],strs[1]);
        if(pre==null){
            return "";
        }
        for (int i = 2; i < strs.length; i++) {
            pre = help(pre,strs[i]);
            if(pre==null){
                return "";
            }
        }
        return pre;
    }
    private String help(String s1,String s2){
        int len = Math.min(s1.length(),s2.length());
        for (int i = len; i > 0; i--) {
            String t = s1.substring(0,i);
            if (t.equals(s2.substring(0,i))){
                return t;
            }
        }
        return null;
    }
}

现在的


quota cache
<SimpleQuotaVo, QuotaVo> quotaCache
<SimpleQuotaVo, Boolean> existCache

checkQuota-> quotaCache ->true return quotaVo
   			->false check existCache -> 

permcache是多请求多量
quotacache是多请求少量
===========================
当changecontroller有变化时
调用listquota每次拉全量的quota到**内存**（不进行时间大小限制）


readquota逻辑
检查内存中维护的quota，存在即返回，不存在即返回null
存在问题是否只维护existedQuota在内存就好了：
比如 每次changecontroller有变化时，清除quotaCache中的value，并设置existedQuota（内存无限制） value为true

readquota逻辑
判断existedquota为false时，直接返回null
existedquota为true时，查找quotacache，存在即返回，不存在则去数据库查询
存在问题 设置quota不能即时生效？应该在add的时候更新existedquota，read的时候走逻辑

存在问题：可不可以使用bloomfilter提高使用数据量

插件里调listquota 缓存触发 每30秒更新一次
拉全量数据 -- change的时候拉数据
 data container -- 到时间清掉 

刚开始
===========================

注意最大限度减小 quota数量较多且频繁listquota时 

listA.containsAll(listB) && listB.containsAll(listA)



if quota数量较多时 -- 软引用

changequota -> quotacache invalid
		existedCache true -- 后端存在的quota
缓存失效时间后quota失效-> ExistedQuota需要是内存 quota 缓存生效需要等一段时间-》list quota把所有quota都设为true existedQuota不会失效

需要重新改changemanager的逻辑


http://172.26.5.45:8180   admin/admin

后台密码是123456

删掉所有的quotacache部分，然后重新调整架构

// 备份mysql
mysqldump -h 172.26.5.45 -P8320 -uroot -p17795265 --set-gtid-purged=off --triggers --routines --database guardian > guardian_txsql.sql
// 备份ldif
ldapsearch -L -H ldap://172.26.5.45:10389 -x -D uid=admin,ou=system -w 123 -b dc=tdh -E sss=-entryDN:2.5.13.1 "*" "entryDN" > backup.ldif

guardian.ds.realm=TDH
guardian.ds.realm=TRANSWARP

sed -i 's/TDH/TRANSWARP/g' backup.ldif

test1 fish||bear
test2 cat&&fox
test3306 3307
gys syg
zjj jjz
cyj 123
wangb aaa

 /*
     * Overview.
     *
     * The wait queue is a variant of a "CLH" (Craig, Landin, and
     * Hagersten) lock queue. CLH locks are normally used for
     * spinlocks.  We instead use them for blocking synchronizers by
     * including explicit ("prev" and "next") links plus a "status"
     * field that allow nodes to signal successors when releasing
     * locks, and handle cancellation due to interrupts and timeouts.
     * The status field includes bits that track whether a thread
     * needs a signal (using LockSupport.unpark). Despite these
     * additions, we maintain most CLH locality properties.
     *
     * To enqueue into a CLH lock, you atomically splice it in as new
     * tail. To dequeue, you set the head field, so the next eligible
     * waiter becomes first.
     *
     *  +------+  prev +-------+       +------+
     *  | head | <---- | first | <---- | tail |
     *  +------+       +-------+       +------+
     *
     * Insertion into a CLH queue requires only a single atomic
     * operation on "tail", so there is a simple point of demarcation
     * from unqueued to queued. The "next" link of the predecessor is
     * set by the enqueuing thread after successful CAS. Even though
     * non-atomic, this suffices to ensure that any blocked thread is
     * signalled by a predecessor when eligible (although in the case
     * of cancellation, possibly with the assistance of a signal in
     * method cleanQueue). Signalling is based in part on a
     * Dekker-like scheme in which the to-be waiting thread indicates
     * WAITING status, then retries acquiring, and then rechecks
     * status before blocking. The signaller atomically clears WAITING
     * status when unparking.
     *
     * Dequeuing on acquire involves detaching (nulling) a node's
     * "prev" node and then updating the "head". Other threads check
     * if a node is or was dequeued by checking "prev" rather than
     * head. We enforce the nulling then setting order by spin-waiting
     * if necessary. Because of this, the lock algorithm is not itself
     * strictly "lock-free" because an acquiring thread may need to
     * wait for a previous acquire to make progress. When used with
     * exclusive locks, such progress is required anyway. However
     * Shared mode may (uncommonly) require a spin-wait before
     * setting head field to ensure proper propagation. (Historical
     * note: This allows some simplifications and efficiencies
     * compared to previous versions of this class.)
     *
     * A node's predecessor can change due to cancellation while it is
     * waiting, until the node is first in queue, at which point it
     * cannot change. The acquire methods cope with this by rechecking
     * "prev" before waiting. The prev and next fields are modified
     * only via CAS by cancelled nodes in method cleanQueue. The
     * unsplice strategy is reminiscent of Michael-Scott queues in
     * that after a successful CAS to prev field, other threads help
     * fix next fields.  Because cancellation often occurs in bunches
     * that complicate decisions about necessary signals, each call to
     * cleanQueue traverses the queue until a clean sweep. Nodes that
     * become relinked as first are unconditionally unparked
     * (sometimes unnecessarily, but those cases are not worth
     * avoiding).
     *
     * A thread may try to acquire if it is first (frontmost) in the
     * queue, and sometimes before.  Being first does not guarantee
     * success; it only gives the right to contend. We balance
     * throughput, overhead, and fairness by allowing incoming threads
     * to "barge" and acquire the synchronizer while in the process of
     * enqueuing, in which case an awakened first thread may need to
     * rewait.  To counteract possible repeated unlucky rewaits, we
     * exponentially increase retries (up to 256) to acquire each time
     * a thread is unparked. Except in this case, AQS locks do not
     * spin; they instead interleave attempts to acquire with
     * bookkeeping steps. (Users who want spinlocks can use
     * tryAcquire.)
     *
     * To improve garbage collectibility, fields of nodes not yet on
     * list are null. (It is not rare to create and then throw away a
     * node without using it.) Fields of nodes coming off the list are
     * nulled out as soon as possible. This accentuates the challenge
     * of externally determining the first waiting thread (as in
     * method getFirstQueuedThread). This sometimes requires the
     * fallback of traversing backwards from the atomically updated
     * "tail" when fields appear null. (This is never needed in the
     * process of signalling though.)
     *
     * CLH queues need a dummy header node to get started. But
     * we don't create them on construction, because it would be wasted
     * effort if there is never contention. Instead, the node
     * is constructed and head and tail pointers are set upon first
     * contention.
     *
     * Shared mode operations differ from Exclusive in that an acquire
     * signals the next waiter to try to acquire if it is also
     * Shared. The tryAcquireShared API allows users to indicate the
     * degree of propagation, but in most applications, it is more
     * efficient to ignore this, allowing the successor to try
     * acquiring in any case.
     *
     * Threads waiting on Conditions use nodes with an additional
     * link to maintain the (FIFO) list of conditions. Conditions only
     * need to link nodes in simple (non-concurrent) linked queues
     * because they are only accessed when exclusively held.  Upon
     * await, a node is inserted into a condition queue.  Upon signal,
     * the node is enqueued on the main queue.  A special status field
     * value is used to track and atomically trigger this.
     *
     * Accesses to fields head, tail, and state use full Volatile
     * mode, along with CAS. Node fields status, prev and next also do
     * so while threads may be signallable, but sometimes use weaker
     * modes otherwise. Accesses to field "waiter" (the thread to be
     * signalled) are always sandwiched between other atomic accesses
     * so are used in Plain mode. We use jdk.internal Unsafe versions
     * of atomic access methods rather than VarHandles to avoid
     * potential VM bootstrap issues.
     *
     * Most of the above is performed by primary internal method
     * acquire, that is invoked in some way by all exported acquire
     * methods.  (It is usually easy for compilers to optimize
     * call-site specializations when heavily used.)
     *
     * There are several arbitrary decisions about when and how to
     * check interrupts in both acquire and await before and/or after
     * blocking. The decisions are less arbitrary in implementation
     * updates because some users appear to rely on original behaviors
     * in ways that are racy and so (rarely) wrong in general but hard
     * to justify changing.
     *
     * Thanks go to Dave Dice, Mark Moir, Victor Luchangco, Bill
     * Scherer and Michael Scott, along with members of JSR-166
     * expert group, for helpful ideas, discussions, and critiques
     * on the design of this class.
     */


adminManager.assign(null, new UserAdminRoleVo(registrant, GuardianConstants.USER_ADMIN_ROLE));
    adminManager.assign(null, new UserAdminRoleVo(registrant, GuardianConstants.GROUP_ADMIN_ROLE));
    adminManager.assign(null, new UserAdminRoleVo(registrant, GuardianConstants.ROLE_ADMIN_ROLE));
