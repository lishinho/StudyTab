work36
10:00 - 20:30

工作周报 - 李镇邦 20200629 ~ 20200703

完成：
1. WARP-27572: 对federation OAuth单点登出的设计工作 http://172.16.1.168:8090/pages/viewpage.action?pageId=24593028
2. WARP-47032: guardian-3.1 errocode fix

进行中：
1. WARP-27572: 单点登出接口的完善与调试

本周：
1. 完成WARP-27572
2. 支持sla

loginURl-service-logoutURL

从authentication request解析出SLOservice
拿着SLOservice换后
端存储的registeredService
SLOservice和registeredService决定logouturl：
1. registeredService在后端找是否存储有对应的logouturl，
2. SLOservice解析出logouturl返回
封装logoutmsg
将logoutmsg发送至logouturl

拦截到对应logoutmsg的报文
将报文携带的sessionID映射到client的token，token对应残留在client中的其他session
相应清除掉logout的session

loginurl->logouturl->send
logoutmanager: logout urls -> send

geturls -> for-each { determineUrl(url) }
send msg to logouturl 
get url 


datank

极简版
server
1. 拿到loginurl拼出对应的logouturl
2. 发送logoutMsg 给logouturl 直接走client的logout逻辑
3. 销毁session

http://localhost:8011/federation-server/#/account/login

https://localhost:8011/federation-server/demo/oauth/authorize?client_id=testDemo-e89MA2QVyl&redirect_uri=http://localhost:8282/login&response_type=code&state=YjauxS

29297


/usr/lib/jvm/java-8-openjdk-amd64/bin/java -javaagent:/home/transwarp/Downloads/idea-IC-192.7142.36/lib/idea_rt.jar=33513:/home/transwarp/Downloads/idea-IC-192.7142.36/bin -Dfile.encoding=UTF-8 -classpath /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/cldrdata.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/dnsns.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/icedtea-sound.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jaccess.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/localedata.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/nashorn.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/sunec.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/sunjce_provider.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/sunpkcs11.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/zipfs.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/management-agent.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/home/transwarp/Downloads/work/guardian-federation-demo/spring-security/simple-client/target/classes:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.0.5.RELEASE/spring-boot-starter-web-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter/2.0.5.RELEASE/spring-boot-starter-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.0.5.RELEASE/spring-boot-starter-logging-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/home/transwarp/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/home/transwarp/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.10.0/log4j-to-slf4j-2.10.0.jar:/home/transwarp/.m2/repository/org/apache/logging/log4j/log4j-api/2.10.0/log4j-api-2.10.0.jar:/home/transwarp/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/home/transwarp/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/home/transwarp/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.0.5.RELEASE/spring-boot-starter-json-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.6/jackson-datatype-jdk8-2.9.6.jar:/home/transwarp/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.9.6/jackson-datatype-jsr310-2.9.6.jar:/home/transwarp/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.6/jackson-module-parameter-names-2.9.6.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.0.5.RELEASE/spring-boot-starter-tomcat-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.34/tomcat-embed-core-8.5.34.jar:/home/transwarp/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.34/tomcat-embed-el-8.5.34.jar:/home/transwarp/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.34/tomcat-embed-websocket-8.5.34.jar:/home/transwarp/.m2/repository/org/hibernate/validator/hibernate-validator/6.0.12.Final/hibernate-validator-6.0.12.Final.jar:/home/transwarp/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/home/transwarp/.m2/repository/org/jboss/logging/jboss-logging/3.3.2.Final/jboss-logging-3.3.2.Final.jar:/home/transwarp/.m2/repository/com/fasterxml/classmate/1.3.4/classmate-1.3.4.jar:/home/transwarp/.m2/repository/org/springframework/spring-web/5.0.9.RELEASE/spring-web-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-webmvc/5.0.9.RELEASE/spring-webmvc-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-expression/5.0.9.RELEASE/spring-expression-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf/2.0.5.RELEASE/spring-boot-starter-thymeleaf-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/thymeleaf/thymeleaf-spring5/3.0.9.RELEASE/thymeleaf-spring5-3.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/thymeleaf/thymeleaf/3.0.9.RELEASE/thymeleaf-3.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/attoparser/attoparser/2.0.4.RELEASE/attoparser-2.0.4.RELEASE.jar:/home/transwarp/.m2/repository/org/unbescape/unbescape/1.1.5.RELEASE/unbescape-1.1.5.RELEASE.jar:/home/transwarp/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/home/transwarp/.m2/repository/org/thymeleaf/extras/thymeleaf-extras-java8time/3.0.1.RELEASE/thymeleaf-extras-java8time-3.0.1.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-starter-security/2.0.5.RELEASE/spring-boot-starter-security-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-aop/5.0.9.RELEASE/spring-aop-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/security/spring-security-config/5.0.8.RELEASE/spring-security-config-5.0.8.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/security/spring-security-web/5.0.8.RELEASE/spring-security-web-5.0.8.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/security/oauth/boot/spring-security-oauth2-autoconfigure/2.0.5.RELEASE/spring-security-oauth2-autoconfigure-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/home/transwarp/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.6/jackson-databind-2.9.6.jar:/home/transwarp/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.6/jackson-core-2.9.6.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot/2.0.5.RELEASE/spring-boot-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.0.5.RELEASE/spring-boot-autoconfigure-2.0.5.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/security/spring-security-jwt/1.0.9.RELEASE/spring-security-jwt-1.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.56/bcpkix-jdk15on-1.56.jar:/home/transwarp/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56/bcprov-jdk15on-1.56.jar:/home/transwarp/.m2/repository/org/springframework/security/oauth/spring-security-oauth2/2.3.3.RELEASE/spring-security-oauth2-2.3.3.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-beans/5.0.9.RELEASE/spring-beans-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-core/5.0.9.RELEASE/spring-core-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-jcl/5.0.9.RELEASE/spring-jcl-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/spring-context/5.0.9.RELEASE/spring-context-5.0.9.RELEASE.jar:/home/transwarp/.m2/repository/org/springframework/security/spring-security-core/5.0.8.RELEASE/spring-security-core-5.0.8.RELEASE.jar:/home/transwarp/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar:/home/transwarp/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar:/home/transwarp/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar:/home/transwarp/.m2/repository/io/transwarp/guardian/federation/federation-utils/guardian-3.2.0/federation-utils-guardian-3.2.0.jar io.transwarp.guardian.federation.demo.client.springsecurity.Client

Usage: hdfs dfs -getfacl [-R] <path>
显示文件和目录的访问控制列表（ACL）。如果目录具有默认ACL，则getfacl还会显示默认ACL。
用confidencial
hdfs dfs -getacl / 先走hdfs逻辑再走插件 查看/ facl
配置多个实例 enable parallel

http://172.16.0.244:8080/browse/SLA-7381


server--Map{token-tokenId}, 
server2client(send token/logout}--(token-tokenId)/token
client--Map1{tokenId-token}, Map2{token-session}: receive token--{add Map1, Map2}, logout--{invalid token, drop map}


AS createtoken{tokenID}

在server端包装token 成功发送到client

/slipstream1/complete/default.f_cis_corp_icd_corp_base_info_job

server.port=8282

security.oauth2.client.clientId=testDemo2-vyosOdPAwT
security.oauth2.client.clientSecret=W9ch7pCkhKZ7yrblQ0n6

server.port=8283

security.oauth2.client.clientId=testDemo3-mzYEGK3Ape
security.oauth2.client.clientSecret=yCDjv9gP1VyDeNzY7nRu

hdfs://nameservice1/ext/tdm/exp/EXP_TM_RPT_RE062/00000_0

Principal:{"authorities":[],"details":{"remoteAddress":"0:0:0:0:0:0:0:1","sessionId":"C121FC27A03773FF3F99B621A6A0E6E2","tokenValue":"pLZUroh13IMQg5Nqfk5z-demo","tokenType":"bearer","decodedDetails":null},"authenticated":true,"userAuthentication":{"authorities":[],"details":{"userDetails":{}},"authenticated":true,"principal":"admin","credentials":"N/A","name":"admin"},"clientOnly":false,"principal":"admin","credentials":"","oauth2Request":{"clientId":"testDemo2-vyosOdPAwT","scope":["read","write"],"requestParameters":{"client_id":"testDemo2-vyosOdPAwT#demo"},"resourceIds":[],"authorities":[],"approved":true,"refresh":false,"redirectUri":null,"responseTypes":[],"extensions":{},"refreshTokenRequest":null,"grantType":null},"name":"admin"}

User Access Token:{"access_token":"pLZUroh13IMQg5Nqfk5z-demo","token_type":"bearer","refresh_token":"7doWqxViiAWjtpF7aBCH-demo","expires_in":71998,"scope":"read write","name":"admin#demo-testDemo2-vyosOdPAwT-qpM0FR1prr","user":"admin","clientId":"testDemo2-vyosOdPAwT","clientTenant":"demo","tenant":"demo","source":"CLIENT","createTime":1594121722644,"refreshTime":1594121722644,"validity":72000,
"refreshTokenValidity":79200} Client Access Token:{"access_token":"sawvttCzaxwt18eEeU7X-demo","token_type":"bearer","expires_in":71999,"scope":"read write","name":"testDemo2-vyosOdPAwT#demo-testDemo2-vyosOdPAwT-c3QBsGBjcN","user":"testDemo2-vyosOdPAwT","clientId":"testDemo2-vyosOdPAwT","clientTenant":"demo","tenant":"demo","source":"CLIENT_CRED","createTime":1594121722786,"refreshTime":1594121722786,
"validity":72000,"refreshTokenValidity":79200}

xoxoxxoxoxoxooxoxoxooxox
Principal:{"authorities":[],"details":{"remoteAddress":"0:0:0:0:0:0:0:1","sessionId":"888D3D40B995CF6A5F1EAE9D36D0CFD3","tokenValue":"YxslcAt5keCazp1KQ6G5-demo","tokenType":"bearer","decodedDetails":null},"authenticated":true,"userAuthentication":{"authorities":[],"details":{"userDetails":{}},"authenticated":true,"principal":"admin","credentials":"N/A","name":"admin"},"clientOnly":false,"principal":"admin","credentials":"","oauth2Request":{"clientId":"testDemo3-mzYEGK3Ape","scope":["read","write"],"requestParameters":{"client_id":"testDemo3-mzYEGK3Ape#demo"},"resourceIds":[],"authorities":[],"approved":true,"refresh":false,"redirectUri":null,"responseTypes":[],"extensions":{},"refreshTokenRequest":null,"grantType":null},"name":"admin"}

user to client
User Access Token:{"access_token":"YxslcAt5keCazp1KQ6G5-demo","token_type":"bearer","refresh_token":"7HUvQJVgrIXXFdGnyKGW-demo","expires_in":71998,"scope":"read write","name":"admin#demo-testDemo3-mzYEGK3Ape-YOGF1geT9H","user":"admin","clientId":"testDemo3-mzYEGK3Ape","clientTenant":"demo","tenant":"demo","source":"CLIENT","createTime":1594122806183,"refreshTime":1594122806183,"validity":72000,
"token_hash":-2123358306,"refreshTokenValidity":144000} 

client to resource server
Client Access Token:{"access_token":"q3NuZKLgjiXZvoJ6gOeV-demo","token_type":"bearer","expires_in":71999,"scope":"read write","name":"testDemo3-mzYEGK3Ape#demo-testDemo3-mzYEGK3Ape-YphWWEPmrn","user":"testDemo3-mzYEGK3Ape","clientId":"testDemo3-mzYEGK3Ape","clientTenant":"demo","tenant":"demo","source":"CLIENT_CRED","createTime":1594122806891,
"refreshTime":1594122806891,"validity":72000,"token_hash":1278010940,"refreshTokenValidity":144000

ClientCredentialsTokenEndpointFilter（拿client id和client secret) -> DaoAuthenticationProvider ->tokaneGranter grant DefaultOAuth2AccessToken -> AuthorizationServerTokenServices -> 
/oauth/token

user -- 
server -- token

session 发的 accesstoken 无效

token发给哪个url？
session生成token的过程

AuthorizationServerTokenServices
MultiTenantTokenServices

session

io.transwarp.guardian.federation.utils.oauth2.client.OAuth2ClientException: Failed to process request result.


cas:用户再访问别的应用的时候,就会将这个ticket带上,作为自己的凭据,应用系统接收到请求之后,就会把ticket送到认证系统进行校验,检查ticket的合法性.如果通过校验,用户就可以在不用再次登录的情况下访问应用系统2和3了.
oauth:

session被注销--记录这个session发放的token --向记录token的url发送注销session消息 -- 拿到tokenid映射session --注销client的session
访问resource server没有权限
DelegatedAuthenticationFilter
session有


OAuth2AuthenticationProcessingFilter

server端通知代码 加service 其他在util

 protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest) {
    Map<String, String> parameters = new LinkedHashMap(tokenRequest.getRequestParameters());
    String username = (String)parameters.get("username");
    String password = (String)parameters.get("password");
    parameters.remove("password");
    Authentication userAuth = new UsernamePasswordAuthenticationToken(username, password);
    ((AbstractAuthenticationToken)userAuth).setDetails(parameters);

    Authentication userAuth;
    try {
      userAuth = this.authenticationManager.authenticate(userAuth);
    } catch (AccountStatusException var8) {
      throw new InvalidGrantException(var8.getMessage());
    } catch (BadCredentialsException var9) {
      throw new InvalidGrantException(var9.getMessage());
    }

    if (userAuth != null && userAuth.isAuthenticated()) {
      OAuth2Request storedOAuth2Request = this.getRequestFactory().createOAuth2Request(client, tokenRequest);
      return new OAuth2Authentication(storedOAuth2Request, userAuth);
    } else {
      throw new InvalidGrantException("Could not authenticate user: " + username);
    }
  }
}

几个硬bug：
WARP-40763: SLA-5724 tdh-621和guardian311 312 schedule显示
SLA-


./apacheds-cleaner -H 
 -P 10389 -d tdh -s inceptor1 -p 123 -S hdfs1


ldapsearch -H xxxx -x -D xxxx -w xxxx -b xxx | grep krbtgt

mvn dependency-check:aggregate -DskipTests -Ddependency-check.skip=false

/home/transwarp/Downloads/guardian/examples/target/lib

tar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz

in
[inceptor1]------> lock [apacheds]<-------读写大量数据 [inceptor2]
   [apacheds]

tdh524前 
GuardianMetastoreListener中监听Inceptor中数据库/表的创建/删除事件，给表的创建者赋予一些权限，在创建临时表时创建了大量的临时权限信息，极大增加了ApacheDS数据库文件的大小，也影响Guardian和Inceptor性能
之后是
Guardian中的权限条目都应该通过显示的用户交互进行添加


建表时自动给owner附上权限，许多任务可能会创建成千上万的临时表，这样就会在ApacheDS中产生大量的数据。

mysql -h172.16.1.236 -P15307 -uadmin -padmin --enable-cleartext-plugin --ssl-ca=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/ca-cert.pem --ssl-cert=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/kungate-client-cert.pem --ssl-key=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/kungate-client-key.pem --ssl-mode=VERIFY_CA


mysql -hnode63 -P15307 -uvt_app -p123  --ssl-ca=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/ca-cert.pem --ssl-cert=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/kungate-client-cert.pem --ssl-key=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/kungate-client-key.pem --ssl-mode=VERIFY_CA


mysql -hnode63 -P15307 -uvt_app -p123 --ssl-ca=/etc/kundb10/conf/ca-cert.pem --ssl-cert=/etc/kundb10/conf/kungate-client-cert.pem --ssl-key=/etc/kundb10/conf/kungate-client-key.pem

mysql -hnode63 -P15307 -uyuqitest -p123 --ssl-ca=/etc/kundb10/conf/ca-cert.pem --ssl-cert=/etc/kundb10/conf/kungate-client-cert.pem --ssl-key=/etc/kundb10/conf/kungate-client-key.pem

MySQL [test]> show create database test;
+----------+---------------------------------------------------------------+
| Database | Create Database                                               |
+----------+---------------------------------------------------------------+
| test     | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8 */ |
+----------+---------------------------------------------------------------+
1 row in set (0.002 sec)


mysql -hnode63 -P34231 -uroot -pTranswarp! --ssl-ca=/etc/kundb10/conf/ca-cert.pem --ssl-cert=/etc/kundb10/conf/kungate-client-cert.pem --ssl-key=/etc/kundb10/conf/kungate-client-key.pem

kubectl describe po kafka-xrplv-0  --namespace=test

work37

mysql -hnode63 -P34231 -uroot -pTranswarp! --ssl-ca=/etc/kundb10/conf/ca-cert.pem --ssl-cert=/etc/kundb10/conf/kungate-client-cert.pem --ssl-key=/etc/kundb10/conf/kungate-client-key.pem

select database() from dual

工作周报 - 李镇邦 20200706 ~ 20200710

完成：

1. WARP-27572: 本地实现federation单点登出问题demo

其他：
高并发访问guardian api
1. sla-8427: 青岛国税 tdt访问guardian api报错 高并发堵塞问题 在sla-8440圣哥解决
2. sla-8378: 高并发导致kdc认为是重放攻击 涉及到jira WARP-14694 wiki上写明jdk7没法解决 调整并发数 

修复漏洞
3. sla-8422: 浙江农商 jackson jar包修复漏洞

其他组件
4. sla-8464: 广州农商 search使用guardian sasl接口报kerberos信息错误 开debug需要审核 重启

操作姿势
5. sla-8479: 银保监会 cas启动失败 节点迁移错误
6. sla-8428: kerberos下zk acl问题 新建kafka用户对生成的topic目录无权限 kafka手册里解决

已知问题
7. sla-8370 sla-8450: 国信智电 apacheds主从问题，换jar包后apacheds master读事务不生效
8. sla-8408: hdfs nn频繁切换 访问不正常 apacheds主从不同步 ->  重启apacheds 换jar包解决
9. sla-8424: api连接hyperbase的OAuth配置报错 -> 6.x的组件走dadl会走到core-site的oauth相关配置 在7.0已做修改 现修改core-site配置完成
10. sla-8375: slipstream httpclient获取不到ca证书 上海大数据中心客户端dns抖动 获取ca地址不稳定
11. sla-7680: tdh调用guardian client的getEffectiveService接口版本不支持 -> catalog解决


安全不相关的sla: 
1. sla-8359: guardian不相关，guardian报错是心跳信息 -> inceptor解决
3. sla-8421: inceptor license问题 guardian不相关 不过涉及到sla-5724 311，312版的guardian无法配置inceptor scheduler
4. sla-8462: guardian不相干

本周工作：
1. 解决federation的slo问题
2. 其他jira与wiki的整理 


apacheds--

sophen 


1. sla-8359: guardian不相关，guardian报错是心跳信息 -> inceptor解决
2. sla-7680: tdh调用guardian client的getEffectiveService接口版本不支持 -> catalog解决
3. sla-8375: slipstream httpclient获取不到ca证书 上海大数据中心客户端dns抖动 获取ca地址不稳定
1. sla-8359: guardian不相关，guardian报错是心跳信息 -> inceptor解决
5. sla-8408: hdfs nn频繁切换 访问不正常 apacheds主从不同步 ->  重启apacheds 换jar包解决
6. sla-8424: api连接hyperbase的OAuth配置报错 -> 6.x的组件走dadl会走到core-site的oauth相关配置 在7.0已做修改 现修改core-site配置完成
7. sla-8421: inceptor license问题 guardian不相关 不过涉及到sla-5724 311，312版的guardian无法配置inceptor scheduler
8. sla-8378: 高并发导致kdc认为是重放攻击 涉及到jira WARP-14694 wiki上写明jdk7没法解决 调整并发数 
9. sla-8428: kerberos下zk acl问题 新建kafka用户对生成的topic目录无权限 kafka手册里解决
10. sla-8462: guardian不相干
11. sla-8479: cas启动失败 节点迁移错误
12. sla-8464: search使用guardian sasl接口报kerberos信息错误 重启
13. sla-8370: apacheds主从问题，换jar包后apacheds master读事务不生效
14 sla-8422: jackson jar包修复漏洞
15 sla-8450: hadoop报找不到kerberos database
16 sla-8427: 青岛国税 tdt访问guardian api报错 高并发堵塞问题 在sla-8440圣哥解决


 mysql -h127.0.0.1 -P15307 -uvt_app -p123 --enable-cleartext-plugin --ssl-ca=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/ca-cert.pem --ssl-cert=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/kungate-client-cert.pem --ssl-key=/home/transwarp/go/src/github.com/youtube/vitess/examples/local_mfed/sub_scripts/kungate-client-key.pem --ssl-mode=VERIFY_CA


grant.Action == sqlparser.RevokeStr

target: kundb1.0.master, no valid tablet

Starting MySQL for tablet test-0000000101...
Resuming from existing kuntablet dir:
    /home/transwarp/go/vtdataroot/vt_0000000101
Starting MySQL for tablet test-0000000102...
Resuming from existing kuntablet dir:
    /home/transwarp/go/vtdataroot/vt_0000000102
Starting MySQL for tablet test-0000000103...
Resuming from existing kuntablet dir:

查看Linux内核版本信息

方法1：登陆Linux，在终端输入 cat /proc/version

centos安装lmdb工具集

/guardian/data/partitions/guardian/liblmdb

ldapsearch -h localhost -p10389 -x -D "uid=admin,ou=system" -w 123 -b "ou=people, dc=tdh"

lmdb
不需要运行单独的数据库管理进程，只要在访问数据的代码里引用LMDB库，访问时给文件路径即可。
Lmdb数据库的特性是读不会阻塞写，写不会阻塞读，写操作是序列化的，即同一时刻只能有一个进行中的写事务。

metastoreListener会导致创建临时表时大量无用权限写入
master大量发送数据到slave
slave处理同步返回结果迟缓被挂起 所以大量读事务未释放 写事务会不断向文件末添加新的页，导致jvm堆占满OOM
slave无法读取tcp socket的数据 并向master发出零窗口tcp报文
master写请求堆积 导致full gc
在Guardian Server节点的/etc/guardian/conf/fortress.properties中的admin.pw配置项中读出

注意：

      TDC环境由于配置文件位置有所不同，需要注释掉 apacheds-cleaner 脚本中 “cp /etc/$hdfs_name/conf/core-site.xml /etc/$service_name/conf/hive-site.xml $cur_folder/resources/” 这行代码，改为手工拷贝 core-site.xml 和 hive-site.xml 到 resources 目录下

ApacheDS对应uid=admin,ou=system的root用户密码

以下是對 “> /dev/null 2>&1” 分拆的解釋:
>: 是重新導向, 例如將指令的執行結果寫入到檔案, 而以上的例子是將 /path/to/my-script.sh 的執行結果重新導向到 /dev/null.
/dev/null: /dev/null 在 Unix 或 Linux 就像黑洞, 會將任何導入的東西吃掉, 簡單來說就是程式會照常執行, 但不會輸出任何執行結果.
2: 系統將標準輸入/輸出分成三個, 分別是 stdin (fd 是 0), stdout (fd 是 1), 及 stderr (fd 是 2), 在這裡 2 代表標準錯誤輸出 stderr.
>: 重新導向.
&: 設定使用 fd 代號, 如果 “> dev/null 2>&1” 沒有加上 “&”, 會視後面的 “1” 為檔案名稱, 而不是 fd.
1: fd 的標準輸出 stdout.
簡單來說, “> /dev/null 2>&1” 的意思, 是將左邊程式的所有標準輸出 stdout, 及標準錯誤輸出 stderr 導向到 /dev/null, 即左邊的程式只會執行, 而不會輸出任何程式執行的結果。


yum -y install openldap-clients

手动恢复主从同步?
清除压缩写在一个脚本
apacheDS有一个配置项guardian.ds.lmdb.mapsize控制最大可映射的文件大小?添加配置项guardian.ds.lmdb.mapsize和guardian.ds.ha.syncrepl.log.size
lmdb与apacheds事务?->lmdb压缩
什么样的算冗余权限
DBPASS=`grep password "$DB_PASSWD_FILE" | cut -d'=' -f 2`
DATACONF=${grep "guardian.ds.database.dir" "guardian-ds.properties" 

mkdir /guardian/data/partitions/guardian-compressed
./mdb_copy -c /guardian/data/partitions/guardian /guardian/data/partitions/guardian-compressed
rm -rf /guardian/data/partitions/guardian 
mv /guardian/data/partitions/guardian-compressed /guardian/data/partitions/guardian


if [ -f /etc/guardian/conf/guardian-ds.properties ]; then
  DS_PROPERTIES=/etc/guardian/conf/guardian-ds.properties
  DS_LMDB_DIR=${cat $DS_PROPERTIES | grep guardian.ds.database.dir | cut -d'=' -f 1}
  if [ -n "$DS_LMDB_DIR" ]; then
    mkdir $DS_LMDB_DIR/partitions/guardian-compressed
    ./liblmdb/mdb_copy $DS_LMDB_DIR/partitions/guardian $DS_LMDB_DIR/partitions/guardian/guardian-compressed
    mv $DS_LMDB_DIR/partitions/guardian $DS_LMDB_DIR/partitions/guardian-copy 
    mv $DS_LMDB_DIR/partitions/guardian-compressed $DS_LMDB_DIR/partitions/guardian
    echo "[+] Apacheds lmdb compressed work done!"
   ./liblmdb/mdb_stat -e -f $DS_LMDB_DIR/partitions/guardian
  fi
fi



目录型数据存储

存储用户/组/（系统）角色信息
存储权限、配额信息
存储密码策略信息
提供LDAP/Kerberos接口

目录型数据存储

1. 缓存用户/组/角色信息
2. 提供LDAP/Kerberos接口

进入ApacheDS的master和slave容器，确认ApacheDS进程没有占用异常高的CPU


{
  "LdapServer": "172.16.1.113:10389",
  "LdapCA": "",
  "Method": "mysql_clear_password",
  "User": "uid=admin,ou=system",
  "Password": "123",
  "GroupQuery": "ou=people,dc=tdh",
  "UserDnPattern":"uid=%s,ou=people,dc=tdh"
}

  MDEV-12645 - mysql_install_db: no install test db option  Added --skip-test-db option to mysql_install_db. If specified, no test database created and relevant grants issued.  Removed --skip-auth-anonymous-user option of mysql_install_db. Now it is covered by --skip-test-db.  Dropped some Debian patches that did the same.  Removed unused make_win_bin_dist.1, make_win_bin_dist and mysql_install_db.pl.in.

docker run -p 3306:3308 --name mariadb -v /opt/docker_v/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d 7c1

sed -i 's/ throws.*//g' testv2
删除匹配throws字符后面的字符串

{{ .NAMESPACE }}

root@tdcregression-00 ~]# history 25
 1016  vi guardian.yaml 
 1017  walmctl -s 10.10.90.107:9001 --tls=false -n test compose -w -t 900 -p guardian -f guardian.yaml
 1018  vi guardian.yaml 
 1019  walmctl -s 10.10.90.107:9001 --tls=false -n test compose -w -t 900 -p guardian -f guardian.yaml
 1020  vi guardian.yaml 
 1021  walmctl -s 10.10.90.107:9001 --tls=false -n test compose -w -t 900 -p guardian -f guardian.yaml
 1022  eslmctl -n test list release
 1023  walmctl -n test list release
 1024  walmctl -s 10.10.90.107:9001 -n test list release
 1025  export WALM_HOST=10.10.90.107
 1026  walmctl -n test list project
 1027  walmctl -s 10.10.90.107:9001 -n test list project
 1028  walm -n test list release -p guardian
 1029  walmctl -n test list release -p guardian
 1030  walmctl -s WALM_HOST -n test list release -p guardian
 1031  walmctl -s 10.10.90.107:9001 -n test list release -p guardian
 1032  kubectl get po -owide
 1033  walmctl -s 10.10.90.107:9001 --tls=false -n test list project
 1034  walmctl -s 10.10.90.107:9001 --tls=false -n test list release
 1035  ls
 1036  cat guardian.yaml 
 1037  walmctl -s 10.10.90.107:9001 --tls=false -n test list project
 1038  kubectl get namespace
 1039  kubectl get pods --namespace=test
 1040  history 25

sed -i 's/{{ .PROJECT_NAME }}/tdh/g' tdh.yaml
transwarp@transwarp-lishinho-5480:~/study/20200717$ vi tdh.yaml 
transwarp@transwarp-lishinho-5480:~/study/20200717$ sed -i 's/{{ .NAMESPACE }}/test/g' tdh.yaml
transwarp@transwarp-lishinho-5480:~/study/20200717$ sed -i 's/{{ .NAMESPACE | upper }}/test/g' tdh.yaml
transwarp@transwarp-lishinho-5480:~/study/20200717$ sed -i 's/{{ .GUARDIAN_INSTALL_ID }}/rrpz8/g' tdh.yaml
transwarp@transwarp-lishinho-5480:~/study/20200717$ sed -i 's/{{ .CLUSTER_HOST }}/10.10.90.107/g' tdh.yaml

kubectl describe po kafka-xrplv-0  --namespace=test

kubectl -n kube-system get svc

kubectl get ns

beeline -u "jdbc:hive2://localhost:10000/default;principal=hive/tdcregression-01@TDH"
kinit -kt /etc/keytab

beeline -u "jdbc:hive2://localhost:10000/default;principal=hive/tos_guardian-use@GUARDIAN-USE.TDH"

for i in `seq 1 10`; do echo "create table tb$i(a int);">> c.sql; done

<property>
    <name>hive.metastore.service.id</name>
    <value>tdh-metastore</value>
  </property>

klist -kt hdfs.keytab


cd /etc/hdfs1/conf

klist -kt hdfs.keytab

kinit -kt hdfs.keytab hdfs/tw-node41@TDH

./apacheds-cleaner -H 10.16.71.226 
./apacheds-cleaner -H 10.16.71.226 -P 10389 -d tdh -s tdh-metastore -p 123 -S hdfs1

javax.jdo.option.ConnectionURL

kubectl -n guardian-use edit statefulset executor-pccgp

./apacheds-cleaner -H tdcregression-04 -P 10389 -d tdh -s tdh-metastore -p 123 -S hdfs1

19:19

在你认证登陆成功之后，springsecurity 会把你的登陆用户信息存在session里面，你前端进行修改这个登陆用户的时候，如果要session中的一起修改，最后是在修改接口里面调用，以MVC为例，即前端调用Controller的修改方法的时候调用最好，或者service里面也可以。集成的方法可以看看我的上篇博客登陆基本实现。HttpServletRequest可以直接在Controller注入获取。

172.16.179.50


10.49
11.09


kubectl get po -owide -n guardian-use

jdbc:mysql://tw-node599:3316,tw-node597:3316,tw-node598:3316/metastore_inceptor1?createDatabaseIfNotExist=true&amp;characterEncoding=UTF-8&amp;failOverReadOnly=false&amp;user=hiveuser&amp;password=passwd

if [ -f /etc/$hdfs_name/conf/core-site.xml ] && [ -f /etc/$service_name/conf/hive-site.xml ]; then
  echo "[+] copy core-site.xml and hive-site.xml into resources folder"
  cp /etc/$hdfs_name/conf/core-site.xml /etc/$service_name/conf/hive-site.xml $cur_folder/resources/
elif [ -f $cur_folder/resources/core-site.xml ] && [ -f $cur_folder/resources/hive-site.xml ]; then
  echo "[+] core-site.xml and hive-site.xml exist in $cur_folder/resources/"
else
  echo "[+] please copy core-site.xml and hive-site.xml to $cur_folder/resources/"
  exit 1
fi

jdbc:mysql://tw-node599:3316,tw-node597:3316,tw-node598:3316/metastore_inceptor1?failOverReadOnly=false&amp;createDatabaseIfNotExist=false&amp;characterEncoding=UTF-8&amp;user=inceptoruser&amp;password=password

uid=admin, ou=system

apacheds-cleaner放在tool里
3440f584072467f1cb37fa53afc905eb  apacheds-cleaner-20-07-15.tar.gz
68110fb4da66c1e52e6eddf8efbb689a  apacheds-compressed-20-07-15.tar.gz

work38
首先server的singlehandler生效了么
client的filter生效了么

工作周报 - 李镇邦 20200713 ~ 20200717

完成：
1. WARP-48068: 修改apacheds-cleaner，整理主从不同步问题的wiki(http://172.16.1.168:8090/pages/viewpage.action?pageId=24596451)
2. WARP-27572：federation单点登出调试

其他：
1. sla3-8610: 富登村中银批处理hdfs连接失败
2. kundb权限问题排查支持

本周：
1. federation功能整理并集群测试
2. 支持guardian3.2.1 的开发工作，修改review后的代码

    final String token = BearerTokenExtractor.extract(request);
    if (StringUtils.isBlank(token)) {
      logger.debug("No token can be tracked");
      return;
    }
    final String mappingId = String.valueOf(token.hashCode());

存储开关/重定向地址

        redirectUri = request.getParameter("redirect_uri");

spring.datasource.url=jdbc:mysql://localhost:3307/federation?characterEncoding=UTF-8&amp;useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

server.port=8282

security.oauth2.client.clientId=test1-35BmPNbue7
security.oauth2.client.clientSecret=mJ0MYQ6ScQTmHMbnEY9n

server.port=8283

security.oauth2.client.clientId=test2-yQmIficZSq
security.oauth2.client.clientSecret=I0HlYAnwRCRaojfx0Tf9

    http.addFilterAt(new SloLogoutFilter(), UsernamePasswordAuthenticationFilter.class);

security.oauth2.client.accessTokenUri=http://localhost:8011/federation-server/demo/oauth/token
security.oauth2.client.userAuthorizationUri=http://localhost:8011/federation-server/demo/oauth/authorize
security.oauth2.client.logoutSuccessUri=http://localhost:8011/federation-server/logout
security.oauth2.resource.tokenInfoUri=http://localhost:8011/federation-server/demo/oauth/check_token

resourceServer.secret.uri=http://localhost:8011/resource-server-1-demo/secret

/api/v1/tokens

try {
      is = Thread.currentThread().getContextClassLoader().getResourceAsStream(versionInfoFile);
      info.load(is);
    } catch (IOException ex) {
      LOG.warn("Could not read '" + versionInfoFile + "', " + ex.toString(), ex);
    } finally {
      closeStream(is);
    }

try wwith resource
try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(versionInfoFile)) {
      info.load(is);
    } catch (IOException ex) {
      LOG.warn("Could not read '" + versionInfoFile + "', " + ex.toString(), ex);
    }


 private VersionUtil() {
    info = new Properties();
    String versionInfoFile = "versionInfo.properties";
    try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(versionInfoFile)) {
      info.load(is);
    } catch (IOException ex) {
      LOG.warn("Could not read '" + versionInfoFile + "', " + ex.toString(), ex);
    }
  }

public static void loadVersion(Map<String, String> configs, String component) {
    configs.put(component + ".plugin.version", getPluginVersion());
    configs.put(component + ".component.version", getComponentVersion());
  }



xoxoxoxoxooxoxoxoxoxoxoxoxoxoxoxoxoxoxoxo

  private static final Logger LOG = LoggerFactory.getLogger(VersionUtil.class);

  private Properties info;

  protected VersionUtil(String service) {
    info = new Properties();
    String versionInfoFile = service + "-version-info.properties";
    try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(versionInfoFile)) {
      info.load(is);
    } catch (IOException ex) {
      LOG.warn("Could not read '" + versionInfoFile + "', " + ex.toString(), ex);
    }
  }

  protected String _getComponentVersion() {
    return info.getProperty("componentVersion");
  }

  protected String _getPluginVersion() {
    return info.getProperty("pluginVersion");
  }

  private static final VersionUtil ORIGIN_VERSION_INFO = new VersionUtil("guardian");

  public static String getComponentVersion() {
    return ORIGIN_VERSION_INFO._getComponentVersion();
  }

  public static String getPluginVersion() {
    return ORIGIN_VERSION_INFO._getPluginVersion();
  }

  public static void loadVersion(Map<String, String> configs, String service) {
    configs.put(service + ".plugin.version", getPluginVersion());
    configs.put(service + ".component.version", getComponentVersion());
  }

{"_links":{"self":{"href":"http://localhost:8380/actuator","templated":false},"health":{"href":"http://localhost:8380/actuator/health","templated":false},"info":{"href":"http://localhost:8380/actuator/info","templated":false}}}

["jvm.memory.committed","jvm.gc.pause","process.files.max","jvm.gc.memory.promoted","jvm.memory.max",
"system.load.average.1m","jvm.memory.used","jvm.gc.max.data.size","system.cpu.count","jvm.buffer.memory.used",
"jvm.threads.daemon","system.cpu.usage","jvm.gc.memory.allocated","datasource.connection.pool.usage","jvm.threads.live",
"jvm.threads.peak","process.uptime","datasource.request.count","process.cpu.usage","jvm.classes.loaded","jvm.classes.unloaded",
"jvm.gc.live.data.size",
"jvm.gc.concurrent.phase.time","process.files.open","jvm.buffer.count","jvm.buffer.total.capacity",
"datasource.average.request.time","guardian.request.api","process.start.time"]}



http://172.16.1.97:8080/index.php/s/LHOlbuLppFRgsXN

{"_links":{"self":{"href":"http://localhost:8380/actuator","templated":false},"auditevents":{"href":"http://localhost:8380/actuator/auditevents","templated":false},"beans":{"href":"http://localhost:8380/actuator/beans","templated":false},"health":{"href":"http://localhost:8380/actuator/health","templated":false},"conditions":{"href":"http://localhost:8380/actuator/conditions","templated":false},"configprops":{"href":"http://localhost:8380/actuator/configprops","templated":false},"env":{"href":"http://localhost:8380/actuator/env","templated":false},"env-toMatch":{"href":"http://localhost:8380/actuator/env/{toMatch}","templated":true},"info":{"href":"http://localhost:8380/actuator/info","templated":false},"loggers":{"href":"http://localhost:8380/actuator/loggers","templated":false},"loggers-name":{"href":"http://localhost:8380/actuator/loggers/{name}","templated":true},"heapdump":{"href":"http://localhost:8380/actuator/heapdump","templated":false},"threaddump":{"href":"http://localhost:8380/actuator/threaddump","templated":false},"prometheus":{"href":"http://localhost:8380/actuator/prometheus","templated":false},"metrics":{"href":"http://localhost:8380/actuator/metrics","templated":false},"metrics-requiredMetricName":{"href":"http://localhost:8380/actuator/metrics/{requiredMetricName}","templated":true},"scheduledtasks":{"href":"http://localhost:8380/actuator/scheduledtasks","templated":false},"httptrace":{"href":"http://localhost:8380/actuator/httptrace","templated":false},"mappings":{"href":"http://localhost:8380/actuator/mappings","templated":false}}}

@ConditionalOnClass会检查类加载器中是否存在对应的类，如果有的话被注解修饰的类就有资格被Spring容器所注册，否则会被skip。


curl -X POST /actuator/env --header 'Content-Type: application/json' -d '{"name":"eureka.client.serviceUrl.defaultZone","value":"http://value:guardian.txsql.connection.password@172.16.203.112"}'


POST http://localhost:8380/actuator/env
Content-Type: application/json
{"name":"eureka.client.serviceUrl.defaultZone","value":"http://value:guardian.txsql.connection.password@172.16.203.112"}


您可以按如下方式公开所有端点：management.endpoints.web.exposure.include=*
您可以通过以下方式显式启用/shutdown端点：management.endpoint.shutdown.enabled=true
要公开所有（已启用）网络端点除env端点之外：

http://localhost:8011/federation-server/actuator

@ConditionalOnProperty
通过其两个属性name以及havingValue来实现的，其中name用来从application.properties中读取某个属性值。
如果该值为空，则返回false;
如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。
如果返回值为false，则该configuration不生效；为true则生效。

@DependsOn
该注解用于声明当前bean依赖于另外一个bean。所依赖的bean会被容器确保在当前bean实例化之前被实例化。
举例来讲，如果容器通过@DependsOn注解方式定义了bean plant依赖于bean water,那么容器在会确保bean water的实例在实例化bean plant之前完成。
一般用在一个bean没有通过属性或者构造函数参数显式依赖另外一个bean，但实际上会使用到那个bean或者那个bean产生的某些结果的情况。

test1-35BmPNbue7

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for guardian-federation guardian-3.2.0:
[INFO] 
[INFO] guardian-federation ................................ SUCCESS [  2.400 s]
[INFO] federation-common .................................. SUCCESS [  3.972 s]
[INFO] federation-service ................................. SUCCESS [  6.177 s]
[INFO] federation-utils ................................... SUCCESS [  6.992 s]
[INFO] federation-client .................................. SUCCESS [  3.317 s]
[INFO] samples ............................................ SUCCESS [  0.117 s]
[INFO] oauth-client-demo .................................. SUCCESS [  0.362 s]
[INFO] resource-server-demo ............................... SUCCESS [  0.454 s]
[INFO] oauth-server-demo .................................. SUCCESS [  0.412 s]
[INFO] jenkins-test ....................................... SUCCESS [  0.277 s]
[INFO] ------------------------------------------------------------------------

public static int LengthOfLIS_BinarySearch(int[] nums)
{
    if (nums == null || nums.Length == 0) return 0;
    var res = new List<int>();      //Java8 List<Integer> res = new ArrayList<>();
    res.Add(nums[0]);               //
    for (int i = 1; i < nums.Length; i++)
    {
        if (nums[i] > res.Last())   //当前元素比数组尾部元素大
            res.Add(nums[i]);       //则添加到尾部元素
        else
        {
            //二分法判断nums[i]在result中的哪个位置，如果小于则更新result为当前元素
            int left = 0;
            int right = res.Count - 1;
            while (left <= right)
            {
                int mid = (left + right) / 2;
                if (nums[i] > res[mid])
                    left = mid + 1; //在右边找，更新left
                else
                    right = mid - 1;//在左边找，更新right
            }
            res[left] = nums[i]; //更新res[left]

        }
    }
    return res.Count;
}


curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -D cookies.txt -d '{"username": "admin","password": "123","isSystem": false}' 'http://172.26.5.99:8380/api/v2/login'

curl -X GET --header 'Content-Type: application/json' --header 'Accept: application/json' -b cookies.txt -d '{"dataSource": [ { "type": "GLOBAL","value": "*"}],"serviceName": "inceptor1", "serviceType": "INCEPTOR" }' 'http://localhost:8380/api/v2/perms/authorized-dataNodes?princ=admin&princType=USER&inheritance=false&subtree=false'

curl -X GET --header 'Accept: application/json' 'https://172.26.5.99:8380/api/v1/users/lzb?pageSize=-1&sorting=false&revision=10'

WARP-48198: 1. getuser guardian-3.1.3前端没有

userManager.getUser(sessionVo, username, true, revision >= 1)
 userDao.getRegularUser(username, withLabel)
getregularuser return getUserInternal(username, UserSearchScope.REGULAR, withLabel, false);

v1 WARP-26568

user/group/role
createTime

mobile

迁移数据

时间戳/

const UintSize = 32 << (^uint(0) >> 32 & 1) // 32 or 64

const (
    MaxInt  = 1<<(UintSize-1) - 1 // 1<<31 - 1 or 1<<63 - 1
    MinInt  = -MaxInt - 1         // -1 << 31 or -1 << 63
    MaxUint = 1<<UintSize - 1     // 1<<32 - 1 or 1<<64 - 1
)

dp[i][j] : 表示包含第i行j列元素的最小路径和         

func minimumTotal(triangle [][]int) int {
    if len(triangle) < 1 {
        return 0
    }
    if len(triangle) == 1 {
        return triangle[0][0]
    }
	dp := make([][]int, len(triangle))
	for i, arr := range triangle {
		dp[i] = make([]int, len(arr))
	}
    result := 1<<31 - 1
	dp[0][0] = triangle[0][0]
	dp[1][1] = triangle[1][1] + triangle[0][0]
	dp[1][0] = triangle[1][0] + triangle[0][0]

	for i := 2; i < len(triangle); i++ {
		for j := 0; j < len(triangle[i]); j++ {
			if j == 0 {
				dp[i][j] = dp[i-1][j] + triangle[i][j]
			} else if j == (len(triangle[i]) - 1) {
				dp[i][j] = dp[i-1][j-1] + triangle[i][j]
			} else {
				dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]
			}
		}  
	}
    for _,k := range dp[len(dp)-1] {
        result = min(result, k)
    }
	return result
}

func min(a, b int) int {
	if a > b {
		return b
	}
	return a
}


  {
    "userName": "admin",
    "userLocked": false,
    "rememberMe": false,
    "gidNumber": "5000",
    "uidNumber": "5000",
    "createTime": "2020-07-23T23:16:08.000+0000"
  },

0727

spring中的单例
spring单例在注入时候使用scope控制，默认的@Controller、@Service、@Repository、@Component是单例，

工作周报 - 李镇邦 20200720 ~ 20200724

完成：
1. WARP-48198: guardian server用户列表返回创建时间为空
2. WARP-44993: 重构guardian-plugin返回版本号的接口

其他：
1. guardian和federation metrics相关的代码review
2. 其他提交代码review后的修改

本周：
1. 继续修复guardian各版本问题的jira
2. 修改review后的代码
 

 update gs_user  set create_time = '2020-07-26 09:04:27' where user_id = 5003


    <update id="updateRoleCreateTime" parameterType="Role">
        UPDATE gs_role
        <set>
            <choose> <when test="createTime != null"> create_time = #{createTime} </when> <otherwise> create_time = create_time </otherwise> </choose>
        </set>
        WHERE role_name = #{roleName}
    </update>+

---------------success-----------------------

curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -D cookies.txt -d '{"username": "admin","password": "123","isSystem": false}' 'http://localhost:8380/api/v2/login'

curl -X GET --header 'Content-Type: application/json' --header 'Accept: application/json' -b cookies.txt -d '{"dataSource": [ { "type": "GLOBAL","value": "*"}],"serviceName": "inceptor1", "serviceType": "INCEPTOR" }' 'http://localhost:8380/api/v2/perms/authorized-dataNodes?princ=admin&princType=USER&inheritance=false&subtree=false'
-------------------------------------------------
testGetProxyUgi(io.transwarp.guardian.client.impl.GetUgiTest)  Time elapsed: 0.279 sec  <<< ERROR!
io.transwarp.guardian.common.exception.GuardianClientException: ErrorCode: 63201, ErrorMessage: Failed to login a user guardian/guardian from keytab /tmp/971cf548-9f90-49f8-b16f-6cf889e48d01.keytab
	at io.transwarp.guardian.client.impl.rest.HttpClient.processFailure(HttpClient.java:401)
	at io.transwarp.guardian.client.impl.rest.HttpClient.requestWithHA(HttpClient.java:458)
	at io.transwarp.guardian.client.impl.rest.HttpClient.requestReturningEntity(HttpClient.java:373)
	at io.transwarp.guardian.client.impl.rest.HttpClient.get(HttpClient.java:154)
	at io.transwarp.guardian.client.impl.rest.GuardianClientRestImpl$33.run(GuardianClientRestImpl.java:971)
	at io.transwarp.guardian.client.impl.rest.GuardianClientRestImpl$

testGetUgiByAccessToken(io.transwarp.guardian.client.impl.GetUgiTest)  Time elapsed: 7.311 sec  <<< ERROR!
io.transwarp.guardian.common.exception.GuardianClientException: ErrorCode: 63201, ErrorMessage: Failed to login a user gut-user1 from keytab /tmp/971cf548-9f90-49f8-b16f-6cf889e48d01.keytab
	at io.transwarp.guardian.client.impl.rest.HttpClient.processFailure(HttpClient.java:401)
	at io.transwarp.guardian.client.impl.rest.HttpClient.requestWithHA(HttpClient.java:458)
	at io.transwarp.guardian.client.impl.rest.HttpClient.requestReturningEntity(HttpClient.java:373)
	at io.transwarp.guardian.client.impl.rest.HttpClient.get(HttpClient.java:154)
	at io.transwarp.guardian.client.impl.rest.GuardianClientRestImpl$34.run(GuardianClientRestImpl.java:988)
	at io.transwarp.guardian.client.impl.rest.GuardianClientRestImpl$34.run(GuardianClientRestImpl.java:984)
	at io.transwarp.guardian.client.impl.rest.RestClient.runWithRelogin(RestClient.java:278)


application/x-www-form-urlencoded

1[WAIT]. 现在federation是实现了jdbc session的。假设federation因为某些原因重启，session是会保留的，这个时候拿sessionid到内存里找映射关系，但是ConcurrentHashMap的数据已经没有了，就做不到通知client登出了
需要对jdbcsession作处理
需要修改serverStorage的结构
// for server
// <grantCode, session>
// <sessionId, grantCode>
// <grantCode -> clientId>
grantCode -> 

// < sessionId, grantCode >
// < hashedToken, clientId >

2[REVIEW]. containsKey是不会加锁的，如果都执行到这里，put加锁是串行的。如果有两个线程同时执行到了这里（因为有两个client同时发了请求），那么结果可能是后面一个线程的list覆盖了前面一个list，数据就丢了
arraylist不是线程安全的，如果多个线程执行add，那么数据很可能会丢失的
代码块加锁

3[REVIEW]. 如果很多session不是用户主动注销，而是session有效期超过之后失效的。那么就不会走到这个类里面的逻辑，久而久之这个map会撑满导致无法gc
添加listener监听servlet session事件

4[REVIEW]. 这个方法名好像就是put的意思/接口的只是定义通用的方法，并不关心实际是怎么实现的，所以单从接口来说不会关心拿到的值到底是不是hash过的，也不强求一定是hash过的
serverstorage重构之后改名

5[REVIEW]. 1）这个static变量定义了有啥用吗，除了72行用了一下。看上去应该是个局部变量
（2）还有要考虑一些如果对方是https的情况，可能需要设置hostnameverifier，不校验证书的SAN
（3）确认下client的几个超时时间是多少（ pool connect 和socket）的超时时间是多少，是否合理
httpclient要仿造cas重写 SimpleHttpClientFactoryBean 至少加上setSSLHostnameVerifier maxPooledConnections setDefaultMaxPerRoute

6[REVIEW]. 1）感觉coreSize和maxSize设成200太大了，真的极端情况起200线程性能开销非常大
（2）应该自顶一个ThreadFactory，把线程设为daemon的
（3）这里用一个有界的队列感觉也不太合适，超出界的任务会被拒绝抛出异常
（4）直接用jdk已经封装好的FixedThreadPool就行了
（5）能给这些thread取自定义的名字就更好了，方便jstack定位问题
设置httpclient的线程工厂 使得满足条件 245

7[WAIT].  统计一下，这个logout方法加上里面的子方法调用， 一共调用了多少次oAuth2ClientService.getClient或者oAuth2ClientService.loadClientByClientId（包括在for循环里的），查询了多少次数据库，都是必要的吗，有没有考虑过性能？
final String defaultLogoutUrl = (String) oAuth2ClientService.getClient(clientId).getAdditionalInfo().get(SINGLE_SIGN_OUT_URL);
不好改 不过可以放

8[REVIEW]. 如果是post的话，放在body里更方便。上面的content-type可以设置表单的形式；另外logout-request这个key也不合适，因为value是一个token。而不是一个什么request， 可以叫logout-identifier 之类的
post放到body

9[WAIT]. （1）redirect_uri 在UtilConstants里面有定义常量的
（2）logout的时候client端发过来的请求完全可以不带redirect_uri参数的，难道这个client就无法被通知登出了吗
怎么登出 不拿redirect-uri

10[REVIEW]. 为什么要把有Authorization头作为条件之一？    比如有个请求是Authorization：Basic XXXXXX  它和oauth2协议有什么联系吗？
把什么作为识别token request的条件

11[REVIEW].这个是给resource-server用的，把token放在头里面进行认证，但是这个请求是无状态的，谈不上登录登出
这个只能在用auth code获取access token的那个filter中调用这个方法，其他地方是拿不到token的
重写extracttoken 而且考虑重构 如果重构 可能还要重写

12[REVIEW]. （1）还是变量命名的问题
（2）shiro的实现呢？shiro的session并不是HttpSession，是不是没有实现shiro的单点登出？
shiro适配

13[REVIEW]. 如果在这边就能把token和对应的client的logout的地址给记录下来，那么就不需要在登出的时候再去查询了
另外考虑下是不是用授权码作为sessionindex更加合适，因为resource owner和client credentials模式并没有单点登入登出的概念，但是request.getSession()也会强制创建一个没有用session并且记录在map里面

优先考虑这个

14[REVIEW]. 非必要，因为clientSessionTokenStorage默认就是有赋值的
搞清为什么可以删

15[REVIEW]. hashcode不可用


server storage
// <grantCode, session>
// <sessionId, grantCode>
// <grantCode -> clientId>
{
 code (sessionIndex)
 client logout address
 session
}


private SessionManager sessionManager;
 
    public void setSessionManager(SessionManager sessionManager) {
        this.sessionManager = sessionManager;
    }


1. server的storage换成guava cache
2. clientId换成新的数据结构 避免多次查询

server.port=8282

security.oauth2.client.clientId=test1-35BmPNbue7
security.oauth2.client.clientSecret=mJ0MYQ6ScQTmHMbnEY9n

server.port=8283

security.oauth2.client.clientId=test2-yQmIficZSq
security.oauth2.client.clientSecret=I0HlYAnwRCRaojfx0Tf9


    ManagerBase是所有session管理工具类的基类，它是一个抽象类，所有具体实现session管理功能的类都要继承这个类，该类有一个受保护的方法，该方法就是创建sessionId值的方法：
    （tomcat的session的id值生成的机制是一个随机数加时间加上jvm的id值，jvm的id值会根据服务器的硬件信息计算得来，因此不同jvm的id值都是唯一的），
    StandardManager类是tomcat容器里默认的session管理实现类，
    它会将session的信息存储到web容器所在服务器的内存里。
    PersistentManagerBase也是继承ManagerBase类，它是所有持久化存储session信息的基类，PersistentManager继承了PersistentManagerBase，但是这个类只是多了一个静态变量和一个getName方法，目前看来意义不大，对于持久化存储session，tomcat还提供了StoreBase的抽象类，它是所有持久化存储session的基类，另外tomcat还给出了文件存储FileStore和数据存储JDBCStore两个实现。

LOG.error("Failed to add label {}", label, e);
      throw new LabelException(e, ErrorType.LabelError.DEFAULT, label.getName());

cat /etc/lsb-release
genericfilterbean

SLOClientInfoRo sloClientInfoRo = new SLOClientInfoRo(client.getClientId(), authorizationCode, logoutUrl,
                authorizationRequest.getRedirectUri(), logoutHeader, enableSLO);

@Configuration
public class SessionConfiguration extends WebMvcConfigurerAdapter{
    //注册session监听器;
    @Bean
    public ServletListenerRegistrationBean<SessionListener> servletListenerRegistrationBean() {
        ServletListenerRegistrationBean<SessionListener> slrBean = new ServletListenerRegistrationBean<SessionListener>();
        slrBean.setListener(new SessionListener());
        return slrBean;
    }

}

UsernamePasswordAuthenticationFilter之前拦不到logout request
logout-identifier

singleLogoutCallbacksEnabled
AbstractAuthenticationProcessingFilter servlet3.1+ ChangeSessionIdAuthenticationStrategy

http.addFilterAfter(new ClientSingleLogoutFilter(), SecurityContextPersistenceFilter.class);

SLOClientInfoRo

HashMapClientSessionMappingStorage
CacheClientSessionMappingStorage
expireAfterAccess
expireAfterWrite
clientSLOStorage

ThreadLocalRandom

func main(){
    //带缓冲的channel
    ch := make(chan Task, 3)

    //启动固定数量的worker
    for i := 0; i< numWorkers; i++ {
        go worker(ch)
    }

    //发送任务给worker
    hellaTasks := getTaks()

    for _, task := range hellaTasks {
        ch <- task
    }

    ...

hchan结构体使用一个环形队列来保存groutine之间传递的数据(如果是缓存channel的话)，使用两个list保存像该chan发送和从该chan接收数据的goroutine，还有一个mutex来保证操作这些结构的安全。
https://zhuanlan.zhihu.com/p/27917262
https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-channel/
https://speakerdeck.com/kavya719/understanding-channels
}

func worker(ch chan Task){
    for {
       //接受任务
       task := <- ch
       process(task)
    }
}
  private void buildCache() {
    mappingIdToSessionCache = CacheBuilder.newBuilder()
      .maximumSize(maximumSize)
      .expireAfterAccess(expireAfterAccess, TimeUnit.MINUTES)
      .expireAfterWrite(expireAfterWrite, TimeUnit.MINUTES)
      .build();

    String cacheInfo = new StringBuilder()
      .append(name)
      .append(" info: maximumSize=")
      .append(maximumSize)
      .append(", expireAfterAccess=")
      .append(expireAfterAccess)
      .append("min, expireAfterWrite=")
      .append(expireAfterWrite)
      .append("min ")
      .toString();
    LOG.info(cacheInfo);
  }

  public static class Builder {
    private long maximumSize = 10000;
    private long expireAfterAccess = 60;
    private long expireAfterWrite = 120;
    private String name = "SLO client cache";

    public CacheClientSessionMappingStorage.Builder name(String name) {
      if (!StringUtils.isEmpty(name)) {
        this.name = name;
      }
      return this;
    }

    public CacheClientSessionMappingStorage.Builder maximumSize(long maximumSize) {
      if (maximumSize > 0) {
        this.maximumSize = maximumSize;
      }
      return this;
    }

    public CacheClientSessionMappingStorage.Builder expireAfterAccess(long expireAfterAccess) {
      if (expireAfterAccess > 0) {
        this.expireAfterAccess = expireAfterAccess;
      }
      return this;
    }

    public CacheClientSessionMappingStorage.Builder expireAfterWrite(long expireAfterWrite) {
      if (expireAfterWrite > 0) {
        this.expireAfterWrite = expireAfterWrite;
      }
      return this;
    }

    public CacheClientSessionMappingStorage build() {
      return new CacheClientSessionMappingStorage(this);
    }
  }


LOG.info("========== test create token with null owner ==========");

  private void buildCache() {
    mappingIdToSessionCache = CacheBuilder.newBuilder()
      .maximumSize(maximumSize)
      .expireAfterAccess(expireAfterAccess, TimeUnit.MINUTES)
      .expireAfterWrite(expireAfterWrite, TimeUnit.MINUTES)
      .build();

    String cacheInfo = new StringBuilder()
      .append(name)
      .append(" info: maximumSize=")
      .append(maximumSize)
      .append(", expireAfterAccess=")
      .append(expireAfterAccess)
      .append("min, expireAfterWrite=")
      .append(expireAfterWrite)
      .append("min ")
      .toString();
    LOG.info(cacheInfo);
  }

kubectl get cm -n tdcsys| grep filebeat
kubectl edit cm -n tdcsys filebeat-confd-conf-krbwz

work40

https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-channel/

工作周报 - 李镇邦 20200727 ~ 20200731

完成：
1. 完成federation shiro client的单点登出实现
2. federation增加client部分的SLO内存session容器，用于适应不同需求，增加session listener控制并优化封装server端数据结构，暴露可配置的服务选项
3. 重构http server以适应https，异步发送，重试机制，资源池处理等多种策略需求
4. 上传apacheds-cleaner压缩包更新wiki
5. 修改review后的WARP-44993，WARP-48198等jira

本周：
1. 支持oncall工作
2. 修复review后的代码 支持新版本功能的完善

jps -l
jstat -gccause [pid] 1000 20
jinfo -flags [pid]
jmap -histo [pid]

 @ConditionalOnMissingBean(name = "hostnameVerifier")
    @Bean
    public HostnameVerifier hostnameVerifier() {
        if (casProperties.getHttpClient().getHostNameVerifier().equalsIgnoreCase("none")) {
            return NoopHostnameVerifier.INSTANCE;
        }
        return new DefaultHostnameVerifier();
    }

这个是kerberos用来加密数据的加密算法， 不加kerberos会忽略非许可的enctypes的密钥。kdc应该会选择这个list交集的算法作为加密

return new ModelAndView(getAuthorizationCodeResponse(authorizationRequest, authentication));

          Map<String, Object> clientAdditionalInfo = client.getAdditionalInformation();
          // extract authentication code for SLO
          String authorizationCode = generateCode(authorizationRequest, authentication);
          HttpSession requestSession = request.getSession(false);
          if (requestSession != null) {
            List<SLOClientInfoRo> sloInfoList = new ArrayList<>();
            SLOClientInfoRo sloClientInfoRo = new SLOClientInfoRo.Builder().clientId(client.getClientId())
              .authorizationCode(authorizationCode)
              .defaultLogoutUrl((String) clientAdditionalInfo.get(SLO_CLIENT_LOGOUT_URL))
              .resolveLogoutUrl(authorizationRequest.getRedirectUri())
              .clientSLOHeader((String) clientAdditionalInfo.get(SLO_CLIENT_LOGOUT_HEADER))
              .enableSLO((boolean) clientAdditionalInfo.getOrDefault(SLO_CLIENT_LOGOUT_ENABLED, true))
              .build();
            if (null != requestSession.getAttribute(SLO_SESSION_CLIENT_ATTRIBUTE)) {
              sloInfoList = (List<SLOClientInfoRo>) requestSession.getAttribute(SLO_SESSION_CLIENT_ATTRIBUTE);
            }
            sloInfoList.add(sloClientInfoRo);
            requestSession.setAttribute(SLO_SESSION_CLIENT_ATTRIBUTE, sloInfoList);
          }
          RedirectView redirectView = null;
          try {
            redirectView = new RedirectView(getSuccessfulRedirect(authorizationRequest,
              authorizationCode), false, true, false);
          } catch (OAuth2Exception e) {
            redirectView = new RedirectView(getUnsuccessfulRedirect(authorizationRequest, e, false),
              false, true, false);
          }
          return new ModelAndView(redirectView);

其中primarykey的产生，是随机产生的，而jdbcSession的一个成员变量delegate是MapSession的实例

EATE TABLE IF NOT EXISTS `gf_fed_single_logout` (
  `grant_code` VARCHAR(255) NOT NULL,
  `primary_id` VARCHAR(255) NOT NULL,
  `session_id` VARCHAR(255) NOT NULL,
  `client_id` VARCHAR(255) NOT NULL,
  `logout_redirect_url` VARCHAR(255) NOT NULL,

private String sessionId;
  private String clientId;
  private String authorizationCode;
  private String resolveLogoutUrl;

  private String determineLogoutUrl(final SLOClientEntity clientInfo) {
    try {
      final String defaultLogoutUrl = clientInfo.getDefaultLogoutUrl();
      if (!StringUtils.isEmpty(defaultLogoutUrl)) {
        LOG.debug("Logout request will be sent to [{}] in default", defaultLogoutUrl);
        return defaultLogoutUrl;
      }

      final String redirectUrl = clientInfo.getResolveLogoutUrl();
      if (!StringUtils.isEmpty(redirectUrl)) {
        LOG.debug("Logout request will be sent to [{}] within redirect url", redirectUrl);
        return redirectUrl;
      } else {
        LOG.debug("Logout request will not be sent, the URL is not valid");
      }
      return null;
    } catch (final Exception e) {
      LOG.error("Failed to resolve logout url for client {}", clientInfo.getClientId(), e);
      return null;
    }
  }

server.port=8282

security.oauth2.client.clientId=test1-SJYkkdSZ82
security.oauth2.client.clientSecret=V3t7qWP02O0oA61eTOrv

server.port=8283

security.oauth2.client.clientId=test2-AqF4DGS9l4
security.oauth2.client.clientSecret=I52N0LFcfHgXqpkoS3aN

server.port=8284

security.oauth2.client.clientId=test-noSLO-Q3HVMw5Ytj
security.oauth2.client.clientSecret=ArxvV2gL2yTlLNTYMb5R

test-noSLO-Q3HVMw5Ytj
ArxvV2gL2yTlLNTYMb5R

select * from oauth_client_details\G;

PRIMARY KEY (`grant_code`, `session_id`, `client_id`),

txsql有

docker pull 172.16.1.99/transwarp/guardian:guardian-3.1.3-rc0

host/10.20.148.88@TDH
host/wgq081@TDH

  @Value("${server.servlet.session.timeout:T(java.Time.Duration)1h}")

guardian.federation.service.session.enableSharing

server.servlet.session.timeout

setSLOSessionMappingStorage

SLOIdentifier


