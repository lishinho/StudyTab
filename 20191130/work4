本周：
1. WARP-39221：完成项目关于改动的重构部分
2. WARP-31985: 
2. guardian端代码的继续熟悉学习

11.25
添加批量删除注册服务的接口

CI 是持续集成。CD 是持续部署。
SPNEGO是一种使用GSS-API(通用安全服务应用接口)认证机制的安全协议。 

guardian/guardian-client/src/test/java/io/transwarp/guardian/client/impl/RemoveServiceListTest.java
不要提交不用的文件
return后加分号不需要空格
CollectionUtils.isEmpty(serviceNames)可以替代== null || .size()==0
不要没用地调多次系统函数
注意一下非static final变量名，以及方法名都用驼峰命名法
一般是SQL里面的保留字或者关键字都大写
一般单个变量名叫serviceName的话，集合形式的就叫serviceNames
花括号前面要加个空格
guardian 的项目都是空两个空格的，所有的提交都检查一下
心跳问题
    GuardianConfiguration guardianConfiguration = new GuardianConfiguration();
    guardianConfiguration.setLong(GuardianVars.GUARDIAN_CLIENT_HEARTBEAT_REPORT_INTERVAL.varname,
        500L);


Etcd是CoreOS开源的一个高可用强一致性的分布式存储服务
Kubernetes使用Etcd作为数据存储后端,把需要记录的pod、rc、service等资源信息存储在Etcd中
Etcd使用raft算法将一组主机组成集群,raft 集群中的每个节点都可以根据集群运行的情况在三种状态间切换:
follower、candidate与leader。
leader 和follower 之间保持心跳,如果follower在一段时间内没有收到来自leader的心跳,就会转为candidate,发出新的选主请求。当一个节点获得了大于一半节点的投票后会转为leader节点

API Server提供了k8s各类资源对象(pod,RC,Service等)的增删改查及watch等HTTP Rest接口,是整个系统
的数据总线和数据中心。
在 kubernetes 集群中,API Server 有着非常重要的角色。API Server负责和etcd交互(其他组件不会直接操作
etcd,只有 API Server 这么做),是整个 kubernetes 集群的数据中心,所有的交互都是以API Server为核心
的。简单来说,API Server 提供了以下功能:

整个集群管理的API接口:所有对集群进行的查询和管理都要通过API Server来进行
集群内部各个模块之间通信的枢纽:所有模块之之间并不会之间互相调用,而是通过和 API Server 打交道来完成自己
那部分的工作
集群安全控制:API Server 提供的验证和授权保证了整个集群的安全

Controller Manager 是一个集群内部的管理控制中心,有一组控制器构成,这组控制器负责集群内部的 Node、
Pod、Endpoint、Namespace、ServiceAccount、ResourceQuota 等等资源的管理。
• 每个Controller通过API Server提供的接口实时监控整个集群的每个资源对象的当前状态,当发生各种故障导致
系统状态发生变化时,会尝试将系统状态修 复到“期望状态”

负责集群的资源调度,为新建的pod分配机器
根据特定的调度算法将pod调度到指定的工作节点(Node)上,这一过程也叫绑定(bind)。Scheduler的输
入为需要调度的Pod 和可以被调度的节点(Node)的信息,输出为调度算法选择的Node,并将该pod bind到该
Node

调度过程分为两步, predicate以及prioritize
predicate筛选满足条件的node
prioritize给剩下node打分,选择分数最高的node,作为bind的node

kube-proxy负责service的实现,即实现了k8s内部从pod到service和外部从node port到service的访问。

集群中的每个 Node 都有 Kubelet 进程,该进程用于处理 Master 节点下发到本节点的任务,管理 Pod 以及
Pod 中的容器。
节点管理:kubelet 启动时向 API Server 注册节点信息,并定时向 API Server 汇报节点状况;
Pod管理:创建/删除 Pod,下载容器镜像,用 Pause 创建容器,运行容器,校验容器是否正确等;

kubelet
容器健康检查:通过访问容器的 HTTP 接口(HTTP 状态码作为判断依据)来判断容器是否健康;
cAdvisor 资源监控:cAdvisor 集成到 kubelet 程序的代码之中,负责查找当前节点的容器,自动采集容器级别的 CPU、内存、文件系统和网络使用的统计信息。
////

通过将系统内部的对象“分配”到不同的Namespace中,形成逻辑上分组的不同项目、小组或用户组,便于不同
的分组在共享使用整个集群的资源的同时还能被分别管理。
与Resource Quota(配额)一起提供多租户管理
Kubernetes集群在启动后,会创建一个名为“default”的Namespace,如果不特别指明Namespace,则用户创建的Pod、RC、Service都被系统创建到“default”的Namespace中
kube-system是预留的命名空间,系统服务在kube-system下运行
可以通过配置RBAC, 每个用户只能使用自己命名空间下的资源


用于限制命名空间下资源的使用
命名空间下如果没有配额, 则视为无限制
可以限制cpu,memory,存储卷等
目前主要是限制pod的创建

Resource Quota (配额)

pod无法在带quota的命名空间下创建
超出配额
pod中的容器没有资源使用声明


K8S中最小的调度单位
一个pod只会调度到一台机器,不会横跨两台机器
一个pod调度完成之后,不会移动到其他机器
容器组中包含一个或多个容器
•
•
Pod (容器组)
• 共享网络空间
• infra 容器用于维持容器组IP
• 共享存储卷
•
来源:
• 用户可以创建pod
• Job,Rs,Deployment,Statefulset产生

Pod生命周期
Pending (pod中至少还有一个容器还没有启动)
Running (pod中所有容器都启动了,并且至少一个容器还在运行中)
Succeed (pod中所有容器都退出了,并且都成功退出)
Failed (pod中所有容器都退出了,并且至少一个容器失败退出)
Unknow (无法或者容器状态)

11.26
抽象类，list初始化

git rebase -i HEAD~21 合并多个commit到一个（要观察head的位置）
把文件中的操作换为s，ctrl-X yes然后保存，然后关闭
    <delete id="deleteServices" parameterType="java.util.List">
        DELETE FROM gs_service WHERE service_name IN
        <foreach collection="serviceNames" open="(" close=")" item="item" separator="," >
            #{item}
        </foreach>
    </delete>
注意item sql写在xml里的方法

Guardian-V2重构
ctrl点击项目名 快捷查找

  @Override
  public void removeServices(final List<ServiceVo> ServiceVos) throws GuardianClientException {
    runWithRelogin(new RestWork<Void>() {
      @Override
      public Void run() throws GuardianClientException {
        final QueryString qs = new QueryString();
        for (ServiceVo serviceVo : ServiceVos) {
          qs.add("serviceName", serviceVo.getServiceName());
        }
        httpClient.delete(RESOURCE_SERVICES + qs);
        return null;
      }
    });
  }

git rebase trunk/master
git rebase -i HEAD~1
git reflog

完成WARP-31228删除服务list的逻辑

1127
linux tab命令自动补全
重构项目/目的-1.apacheds-backend里面没有东西->统一融合到guardian后端代码 2.一大堆mf文件->apacheds相关，不用管
报错 没改的地方-》测试文件用到扥都是同一数据库，所以会互相影响数据，在dao层的操作记得sessioncommit
guardian跑一次太慢0了8

1.session没有commit
2.方法错了，不是deleteserviceperms
3.路径

  @Override
  public List<UserVo> getGroupOwners(final String groupName, final boolean inheritance) throws GuardianClientException {
    return runWithRelogin(new RestWork<List<UserVo>>() {
      @Override
      public List<UserVo> run() throws GuardianClientException {
        QueryString qs = new QueryString();
        qs.add("inheritance", inheritance);
        return httpClient.get(GROUP_URL + "/" + encode(groupName) + "/owners" + qs.toString(), new TypeReference<List<UserVo>>() {
        });
      }
    });
  }



DAO（Data Access Object）顾名思义就是用 OO 的方式去执行数据库的操作，包括函数化的 CRUD，可以自己去写也可以用 ORM 框架。Service 可以处理事务和业务逻辑，比如用户登录的校验等。Controller 其实就与业务无关了，它更多的是将 Service 层的结果加以处理返回给 View，也可能会处理一些简单的参数检验工作。Util 的话就是一些辅助类（或函数），涉及面可能比较广，粒度小，比如生成 MD5 的便利函数等。Model 是最简单的，Java 里对应的就是 Beans，ORM 框架也将根据 Model 中的定义去生成 SQL 语句，在其他语言中也是一些 Plain Old Object，自身可能会有一些数据表达的处理功能，但更多的不应该涉及副作用。

view-controller-service-dao-db
Controller-->service接口-->serviceImpl-->dao接口-->daoImpl-->mapper-->db
util,model

在SpringMvc后台进行获取数据，一般是两种。 
1.request.getParameter(“参数名”) 
2.用@RequestParam注解获取

@RequestParam 参数标识注解存在三个参数
1、value值
对应url提交的?id=xx中的id，参数名

2、defaultValue 该参数的默认值
当url中id值没有传输时将使用这个参数进行赋值

3、required
是否必须。默认为 true, 表示请求参数中必须包含对应
的参数，若不存在，将抛出异常

完成WARP-31228的重构

11.28
两个blog：
1. dao-service-controller层 1
2. git的利用
3.业务，群，部门，岗位 1
4. spring常用注解
组件类注解
@component->spring bean
@repository->dao组件
@service->业务逻辑组件
@controller->控制器组件

11


Web 层:主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。
git rebase trunk refactor/WARP39221
trunk是本地的一个分支，按照gitlab开发流程来
V1和V2的removeService还是像原来一样分开写吧，否则@PathVariable("serviceType") String serviceType  swagger显示是必填的，但是V2又没用到
代码规范 大括号，for循环，空格
tdh是产品hub，tdc是管理云
tcc是tdc的租户管理中心组件

http://172.16.1.168:8090/pages/viewpage.action?pageId=22692984  warp39221开发流程

warp-39528
创建/删除互信API的target domain admin username & password不再是必须参数
需要工具：https://172.26.5.98:8380/swagger-ui.html#!/trustRelations/addTrustRelationUsingPOST
https://172.26.5.98:8380/#/setting/trustRelation
修改范围：master/guardian-backend/trustrelationcontroller-trustRelationshipVo-DomainVo-guardianServerVo

accesstoken coffeebabe git rebase trunk/master accessToken???
1.accesstoken是否能替代用户名密码，需要加限制条件吗-查accesstoken的缓存
2.在数据库中是怎么存储domainVo的-普通存
3.怎么验证？只改了domainVo的构造函数？


启动apacheds的坑：java.lang.NoClassDefFoundError:-> 执行mvn clean install -DskipTests -Pcopy-deps
lock：重启bash

docker的使用

1129
CollectionUtils.isEmpty(serviceNames) 
token-AbstractguardianClient

1. dao-service-controller层 
db-dao-service-controller-view
util,entity
大项目会把项目分解成很多不不同的模块（Module），然后根据用途和角色，我们对这些模块有一个通用的命名规则，这也就是上面这些英文单词的来历。数据从前端

dao= data access object 数据存取对象
自动产生SQL语句来和数据库打交道，让我们对数据库的操作看起来比较像和一个对象打交道。这个对象通常就是DAO。
dao对象一般调用mapper来映射sql语句，执行数据库操作，例如
<delete id="deleteServices" parameterType="java.util.List">
        DELETE FROM gs_service WHERE service_name in
        <foreach collection="serviceNames" open="(" close=")" item="item" separator="," >
            #{serviceNames}
        </foreach>
    </delete>

Service，我们有时候会需要一些相对独立，与业务系统没什么关系的功能。但不是所有的功能都可以做成一个服务，服务是一个相对独立的功能模块，完成一些指定的工作，这些工作高度抽象和通用。一个典型的服务像是数据库服务、缓存服务、文件存储服务、身份验证服务、消息队列服务等。
Util，Util通常来说是我们找不到合适的名字的时候的选择，Util就是工具，在做项目的时候我们总会遇到一些奇奇怪怪的小功能或者重复的代码需要提取。像是URL编码或者解码，或是自创的加密签名算法等等。

entity实体，所有系统中出现需要封装成对象映射于现实世界的物体或事件的，我们都可以用实体类封装，或者划分的更细可以是各个object，view视图，看到的前端界面

分层领域模型规约：

DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。
DTO（ Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。
BO（ Business Object）：业务对象。 由Service层输出的封装业务逻辑的对象。
AO（ Application Object）：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。
VO（ View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。
POJO（ Plain Ordinary Java Object）：在本手册中， POJO专指只有setter/getter/toString的简单类，包括DO/DTO/BO/VO等。
Query：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。
领域模型命名规约：

数据对象：xxxDO，xxx即为数据表名。
数据传输对象：xxxDTO，xxx为业务领域相关的名称。
展示对象：xxxVO，xxx一般为网页名称。
POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO


1. WARP-39221：完成项目关于改动的重构部分
2. guardian端代码的继续熟悉学习
完成WARP-31228删除服务list的逻辑
warp-39528：创建/删除互信API的target domain admin username & password不再是必须参数
1. 只有token/？
2. 集群


完成：
1. WARP-39221:  完成删除服务list的逻辑并提交代码
2. WARP-39221：完成项目关于改动的V2重构部分
 1-guardian项目 从controller层 service层 改到dao层
 2-git 和代码规范
进行中：
WARP-39528：创建/删除互信API的target domain admin username & password不再是必须参数 逻辑编写/测试

