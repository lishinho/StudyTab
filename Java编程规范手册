#Guardian开发手册

##一，代码规范 
1. 注意代码格式
> 代码采取统一格式书写，采取统一的缩进格式。  
> 比如，guardian-federation以及guardian server的缩进为2个空格，避免过长的换行缩进4个空格  
> guardian-plugin的缩进为2个空格，避免过长的换行缩进8个空格
> 一些开源工程如fortress，CAS, JDK的代码是4个空格缩进，避免过长的换行缩进8个空格, 要符合工程统一标准

2. 注意常量命名规范
> 这里所谓的常量是指同时有static final修饰符的值  
> 规范的常量名全大写，而且单词之间用下划线隔开，例如_GUARDIAN_SERVER_ADDR_  
> 避免使用FLAG结尾,可以使用enable等词代替


3. 注意变量命名规范
> 变量命名一般采用驼峰命名法，例如_currentTime_  
> 变量命名要注意词汇意思的分隔与表达，例如_clientId_是client和id两个单词  
> 变量名开头一定是小写  
> 避免使用xxxList命名，可以使用变量名结尾+s表示复数

4. 注意类名命名规范
> 类名应该要能够体现出这个类的用途,突出主体，避免词不答意，例如_LogoutStorage_表达不出store了什么  
> 类名避免出现server，client字段，因为一般无法判断你的组件是作为server端服务还是client端

5. 注意方法名命名规范
> 方法名使用驼峰命名法
> 不要出现无意义的方法名字段，比如_putInSloStorage_,看不出put了什么  
> 接口中方法并不关心内部如何实现，名称不需要暴露细节以免以偏概全,比如_getHashedToken_

6. 注意注释，枚举以及配置文件处理
> 要贴近于原项目的编程风格，不要个人编程色彩过重，不必要时，不要违反原项目规范
> 枚举类型命名要先归类，然后仿造同类下的名字命名
> 代码注释中不要出现中文，一律英文描述

7. 注意命名大写的场合
> 推荐使用单词缩写命名需要全大写,这个优先级没有其他命名规范高，比如_CasRestFormClient_
> SQL里面的保留字或者关键字都大写

8. 注意POJO规范
> Ro的意思是resource object，指的是和dao层打交道时的数据结构，如果没有在dao层和和mapper层用到的话，叫这个名字不合适

9. 一些标准化的命名需要根据标准化的来处理，避免自定义
> 比如已存在或者主键冲突的情况，你可以借鉴一下ErrorType.java里面的命名方式，都叫 ALREADY_EXISTS


## 二，线程安全
1. 采用合理的数据结构
* 在业务逻辑采用单例的时候共享往往要考虑采用多线程安全的数据结构
> 比如hashmap不保证多线程安全，需要使用concurrenthashmap  
> arraylist在同时读写情况下会fastfail抛出异常，建议使用CopyOnWriteList

2. 考虑锁的粒度
> 即使安全的数据结构，有些必要的情况也要加锁，比如concurrenthashmap中containsKey这种方法也是不加锁的  
> 没必要的时候不需要加锁，比如可以在方法中逻辑加锁就不需要选择加锁的数据结构  
> 科学地考虑锁，避免轻业务处理加重的同步锁

3. 注意分布式事务的原子性，尽量采用统一的后端，合理设计表
> 高并发存取时，mysql行锁并不能控制具体行中的数据。比如federation的oauth_client_details表中additional_information存放的值使用多个client并发处理，JVM的锁不能保证读写一致

4. 注意线程创建
> 尽量不要使用创建线程的方式消耗CPU  
> 注意把线程设置为daemon状态，防止出现显式线程  
> 推荐把线程自定义命名，以便后期使用jvm工具分析


## 三，基础实现
1. spring中的单例一般生成为bean，由spring容器管理并持有自己的生命周期
> 一般在spring框架中不需要采用静态内部类实现单例，而是通过注解注入的方式实现  
> 直接声明称component的bean一般不需要通过逻辑判断生成，有逻辑判断的一般统一放在一个类中实现

2. 不要滥用static与final
> static在静态区分配数据空间，表示多个线程共享，不要在局部变量中使用  
> 不用要成员的方法去改变静态变量的值  
> 并没有外部通过某个静态方法要调用时也不需要定成静态变量

3. 不要滥用public private default protected四种编译时访问控制符
> 如果你使用较为开放的访问控制符，意味着你允许他人引用这个方法，要考虑到设计的可用性及日后维护的代价

4. 检查并尽可量优化性能
> 不要在filter等实现方法中每次都执行都去init  
> 避免在for循环中嵌套调用service去后端查找

5. 合理使用泛型，编译期读到之后需要确定类型
> 注意泛型写法new对象应该是xxxx<>()

6. 注意log日志的使用
> 要么private final static Logger LOG = LoggerFactory.getLogger(ServerSLOHandler.class);要么private final Logger logger = LoggerFactory.getLogger(getClass());  
> 避免使用字符串拼接的方式打log
> 注意log日志等级的划分，不要过多的打info日志

7. 注意异常处理
> 尽早处理异常


## 四，项目特性
1. 考虑guardian federation通过_guardian.federation.service.session.enableSharing_配置来控制开关spring jdbc session
> 在实现相关功能时要考虑开关共享session的不同情况，因此在dao层实现了数据库和内存两种实现方式

2. 注意查看项目的具体实现，比如federtaion引用的shiro的单点登出逻辑与cas不同
> shiro使用webcontext中的shiro session，而不是servlet session，处理方式也不相同




## 五，设计规约 
1. 考虑内存中信息的主动清理
> 不主动清理会占用内存过多，导致各种问题

2. 合理设计数据数值，不要为了不存在的需求滥用配置
> 配置设计先考虑需不需要，再考虑能不能数值重用，不行再用一个科学的合理值并提供相应的供他人修改的方法


3. 慎用懒加载，没必要的时候不需要使用
> 懒初始化的唯一好处就是能够在类真正被用到时候初始化类对象

4. 设计同一效果的数值重用为常量,查看没有用用过的变量，以及不能被立即回收的无用变量
> 缓存设计时间找到对应参考值  
> new arrayList<>()开辟的内存如果没有使用要等gc之后才能释放

5. 设计存放数据库或内存的数据能少则少，如果设计开关能前则前
> 配置开关的enum类型值一般不需要放到业务的数据库中，直接在外层判断逻辑即可

6. 尽量补充单测
> 设计者往往更容易且能更好地实现单测

7. 检查共享代码，并善于代码重用
> guardian-plugin工程可以公用guardian工程中guardian-plugins-common模块
> 多个类使用同一常量值需要把该常量值加入到本模块下的constants中

8. 善用内部类，避免过多创建类
> 如果当前设计类只被当前类使用，优先考虑实现成内部类

9. 科学讨论需求是否合理
> 开源实现的功能不一定完美切合当前需求，要考虑避免实现无用功能和接口
> http post请求参数放在body里更方便

10. 减少不必要的方法参数
> 方法中没使用的参数不要传，可替代或转换的参数在方法体内做转换

11. 不要实行没有意义的改动
> 数据库初始化的已有文件不要动
> 不需要添加没用到的常量，如果有需要再加
> 注释一般用来记述将来打算, 方法整体概括说明或标注并无十足把握的区域。如果感觉需要写注释，先进行提炼函数，函数声明的修改，再考虑是否要添加注释

12. 每多加一种新的异常类型，需要对应的错误码，并在国际化文件中加入适当报错

